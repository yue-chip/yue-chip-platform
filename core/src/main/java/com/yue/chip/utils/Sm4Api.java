package com.yue.chip.utils;

import cn.tass.common.kits.Padding;
import cn.tass.exceptions.TAException;
import cn.tass.hsm.GHSMAPI;
import cn.tass.hsm.TACryptConst;
import cn.tass.hsm.Utils;
import cn.tass.kits.Forms;
import org.springframework.core.env.Environment;
import org.springframework.util.StringUtils;

import javax.naming.ConfigurationException;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

public class Sm4Api {
//    Host host1 = new Host("GHSM", -3, "192.168.19.72", 8019, 5);
//    Host host2 = new Host("GHSM", -3, "192.168.19.79", 8019, 5);
//    Host host3 = new Host("GHSM", -3, "192.168.19.194", 8019, 5);
//    Host host1 = new Host("GHSM", -3, "114.112.103.110", 48651, 5);
//    List<Host> hosts = new ArrayList<Host>() {{
//        add(host1);
//        add(host2);
//        add(host3);
//    }};
//    LogConfig logConfig = new LogConfig("error", "./");

    String config =
            "{"
                    + "[LOGGER];"
                    + "logsw=debug,error;logPath=./;"
                    + "[HOST 1];"
                    + "hsmModel=GHSM;"
                    + "host=172.80.5.142;linkNum=-3;"
                    + "port=8019;"
                    + "timeout=5;"
                    + "}";

    private static volatile GHSMAPI api;

    public Sm4Api() {
        try {
            if (Objects.equals(true, isJiaMi())) {
                if (Objects.isNull(api)) {
                    synchronized (GHSMAPI.class) {
                        if (Objects.isNull(api)) {
                            api = GHSMAPI.getInstance(config);
                        }
                    }
                }
            }
//            api = GHSMAPI.getInstance(hosts, logConfig);
//            api = GHSMAPI.getInstance("./cacipher.ini","12345678");
//            api = GHSMAPI.getInstance("./cacipher.ini");
//            GHSMAPI.updateConfigure(config);
        } catch (ConfigurationException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

//    //多实例初始化方式
//    GHSMAPIMultiInstance ghsmapiMultiInstance = new GHSMAPIMultiInstance();
//    GHSMAPIMultiInstance api;
//    {
//        try {
////            api = ghsmapiMultiInstance.getMultiInstance(hosts, logConfig);
//            api = ghsmapiMultiInstance.getMultiInstance(config);
////            api = ghsmapiMultiInstance.getMultiInstance("./cacipher.ini","12345678");
////            api = ghsmapiMultiInstance.getMultiInstance("./cacipher.ini");
////            api.updateConfigure(config);
//        } catch (ConfigurationException e) {
//            e.printStackTrace();
//            System.out.println("需阻断处理");
//        } catch (TAException e) {
//            e.printStackTrace();
//            System.out.println("需阻断处理");
//        }
//    }


    /**
     * LMK加密的对称秘钥
     */
    byte[] symmetricKey = Forms.hexStringToByteArray("669C1CEDDAFA267CC5D727EA727558B5");
    byte[] verifyValue = Forms.hexStringToByteArray("BD8596C22E5A4D88");

    byte[] symmetricKey1 = Forms.hexStringToByteArray("93EF12C95813586FEC3EFDBC7B37642D");
    byte[] verifyValue1 = Forms.hexStringToByteArray("78306FD68851B8E6");
    /**
     * LMK加密的会话密钥密文
     */
    byte[] symmetricKeyKEK = Forms.hexStringToByteArray("2E80A42018F186BCCBCF639F644629E8");
    /**
     * 会话密钥的校验值
     */
    byte[] verifyValueMAC = Forms.hexStringToByteArray("734D092CD8C23E38");
    /**
     * 保护秘钥保护的密文
     */
    byte[] protectionKey = Forms.hexStringToByteArray("2EACE685C5EB2638D1208742F3BE60CD44210B43C894A77C");
    /**
     * 保护秘钥保护的密文的MAC
     */
    byte[] protectionMAC = Forms.hexStringToByteArray("0CB8702D41CBE487");

    /**
     * RSA DER编码的公钥
     */
    byte[] publicKeyRSA = Forms.hexStringToByteArray("308186028180E14CAAFFCEC6D014457D7CA3E943DBABA1299BDBC17690C8E70F7BFA10EA02450805DA4C6CDC38BFBF1349C95B81A88177BA31C08E366EF965CA41EB36A2DACE611B80A752615A094B8291AAB6F8BB3A5894E72842371F34FA04C10DF42C2FEA95C51B9D49BE8B795E10474954FE01BAAC63532520069465FA62EDB266AADEBB020103");
    /**
     * RSA LMK加密的私钥
     */
    byte[] privateKeyRSA = Forms.hexStringToByteArray
    /**
     * RSA 保护秘钥加密的私钥
     */
    byte[] privateKeyRSAKEK = Forms.hexStringToByteArray("6B2FB2BCC75604ABF5761FFA1027FF16324E3038B580C9F63AD3B57BD89059D5799974B4E5E9453763D94E682C629C4617C4E5393E9DDBFB0CFA2A4EA0E832F5C6A30F3EE63C327F6E044F3CB630D0C7DD96D93581835AA529797EB11CF3535650E431181717FDD1D7BBD9FB675FB027134BBF7F10F65245D9A82251A9171DAA439C175895904A2BB74F31BD94FF550023F6245C01DF83B2FCEDDF241307DDC831162AD2203BA3EBC4FD99EAE93C3208F16B0AAF85146ACE5FF06B11D7C81215708AA5C2651D380573F0EDA0984A73F5CE38E21541D50AACF5C5BCD42B6C94D064065ECAED4684E7A40C15904A73A801F2697AF6F3E32C3D7E156A1D1085CA32C7A002FA4AEAD439271E6E5904FC9AC3E65EEBAC51399F60DF3C61AF82BDA04D5E28B587382F8EB751096BC970B7A7DF26D997324F2D002D01A4C8F77C37BB65DBD1DED3B4545323DAE9489A08351507224574A2206FA7EAF8EF0A120D23D6B34E84645E95C3B58187BC91B8F6C04EF15075D6AF38B7E7DD77F6D2B8E66F11960C401BCE56BB4C157DAA26234678A37ACCFC7729CB5018449F7B6A23C0B16CA0B6A5FBE9FC7C8F9A3801A4159822DDDE8D9D7B7233CC3F77E7391DE720A2BFC69F6B938B565A28EBC6B4B665C553A9E1F32A17CC66CB8A2D7FE3EF6CB5112815D562F18EB34987B57DCFF064C7C24E97C3DCF3FD9BD50B351A2DD7CF03DA1F2DDA7A1BD2013C8339AFC4D22C135C49859C9C4CA4C9F730D2EE09A779D244C13FB5C3835F2FF04EE12537B01795D0ABE2D9695208542DC2FF8161AFD6F774E8D524B1DE6096530783");
    /**
     * RSA MAC
     */
    byte[] privateKeyRSAKEKMAC = Forms.hexStringToByteArray("701A4D3572D09760");

    /**
     * KEK 加密的RSA私钥
     */
    byte[] privateKeyKEK = Forms.hexStringToByteArray("7A833CC0FAFBA6EC063DF4827B8FD91FF4B9A69FB0C44FD972173C09E9E56F6918730269561A497403F9478D7BB64FE527F748AF86E3CE7C762A92A07D9C8BBCE0731F9F07C5889AE8B0FF7A31FCCCD76CD20A1AFB95B4D12BEA5DB84059B9CB1FB8F778989FD11CB7F8D84D812190F2EE0F479A4020FEB32C634528FBF660B3AD5AB0BA497B932902294C28B02807DC1AC28E8213BA39582AA677050F9E9256879935484B49D1CD115B39C0A41AE2B18263F78EA4CB781C931EA3C638097D1A7D4245C30ADA1B7C7793FD798EFAB86C3A91F573D4D2ECFA188588A31983320052901CC5AECAEDC5296506442546614B3DFDECA958B5E3A659EC8B52C5818E22F8E50C216264B560073F47E07B07E38CEF2DF4F6E4A458665FD31E6AA1C7B2FB5C4A15405C09E5F2B814FB260C1FFC560A2B6F3370C9DD96BA0A15BA72AB3622FE172F847D60383307C936246B977665CAB5E68EFA6E4EE1F9008FAE7A90D4A2A10AB70969714041707D4AD05F96027FA62FC916C81BA3C8601F7FF3115F17A117AD1B9A3D8438A731707A2D3B65BDA3846D293939CF94EBCC681E8115400454CF2CEA3769A614A9098CA62356B131EA22F4D634B56B365D7A430A3703967B50C6FCA93D11BD5ACC60048B5E00EAF353723D6DE878F8E5E4EA03BD43DF7229E6146DE307F9CC51B7F359F07042500AB5C24EE6F80EA8E1E50961BEC347949E5DD1918027A17196BABEE5790332B76D4AFFCD19143D7462177CDF72DE09BE64320C330090C1C6F1B059E81E02C312ABFC68F454D11EFCF1E0609584D06B09A08599D7A0BF5D63BB9F");
    /**
     * KEK RSA 私钥MAC
     */
    byte[] privateKeyRSAMAC = Forms.hexStringToByteArray("06E5A11D968C36DE");

    /**
     * KEK 加密的SM2私钥
     */
    byte[] privateKeySM2KEK = Forms.hexStringToByteArray("D3C5F579038C8BF3469879DD7F79C2E1B7FF47D7F2D5EFF5B01EFCE51C081D8067E06C0290F8EF6044210B43C894A77C");
    /**
     * KEK SM2 私钥MAC
     */
    byte[] privateKeySM2MAC = Forms.hexStringToByteArray("83E413861F0C0D15");


    /**
     * SM2 der编码的公钥
     */
    byte[] publicKeySM2DER = Forms.hexStringToByteArray("3059301306072A8648CE3D020106082A811CCF5501822D03420004B33D8A2F9E1E1FCA2E8CECCFFB166F52CC2ED0589C25464D0EF85DC87E0537DC16C0D542A53790967A1368B7084F6EFED51FC848D1E3B5370A99BDCB64D17C2F");
    /**
     * SM2 lmk加密的私钥
     */
    byte[] privateKeySM2 = Forms.hexStringToByteArray("66C9DDB0D6400EE059474F5C7339A296D5AA88F02AF031174F212EB6538C21908C4F5CA6457B435F");
    /**
     * SM2 保护秘钥保护的私钥
     */
    byte[] privateKeyKEKSM2 = Forms.hexStringToByteArray("D3C5F579038C8BF3A1624E7DC142A863240A42642337355921C70A7547001B21A0C59D4E0800F99644210B43C894A77C");
    /**
     * SM2 MAC
     */
    byte[] privateKeyKEKSM2MAC = Forms.hexStringToByteArray("B9827812C2E18232");

    /**
     * 随机生成的sm2秘钥 1002
     */
    byte[] publicSM2 = Forms.hexStringToByteArray("3059301306072A8648CE3D020106082A811CCF5501822D03420004D93204DF6335BEF43A90F8566CFB6FB5F7B10BE8082E9C0D9A5AA731F994AF07990FCB6913D902C4C9B8A84A3F96ADDD7BEF537D61404D56E58A68C756AEFD40");
    byte[] privateSM2 = Forms.hexStringToByteArray("6F26783DCE6D45B84D3FF39FFBDB365FE93B94EF15C39E00A09DE07212472FA68D1A3B721C09BB28");

    /**
     * MD5 算法算出的数据摘要
     */
    byte[] md5 = Forms.hexStringToByte("D41D8CD98F00B204E9800998ECF8427E");
    /**
     * SM3 算法算出的数据摘要
     */
    byte[] sm3 = Forms.hexStringToByte("E559D3DE421E81967DD68B28B55E0C26B03FCE10B8A8E5C4E6067497729D40D3");

    /**
     *
     */
    byte[] b = Forms.hexStringToByteArray("00000000000000000000000000000000");

    /**
     * 获取设备信息
     */

    public void getDeviceInfoTest() {
        String deviceInfo = null;
        try {
            deviceInfo = api.getDeviceInfo();
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
        String[] str = deviceInfo.split("/");
        System.out.println("设备生产厂商名称: " + new String(Forms.hexStringToByte(str[0])));
        System.out.println("设备型号: " + new String(Forms.hexStringToByte(str[1])));
        System.out.println("设备编号: " + str[2]);
        System.out.println("内部软件版本号: " + new String(Forms.hexStringToByte(str[3])));
        System.out.println("密码设备支持的接口规范版本号: " + new String(Forms.hexStringToByte(str[4])));
        System.out.println("算法支持（前四字节表示支持的算法，表示方法为非对称算法标识按位或的结果；" +
                "后 4 字节标识算法的最大模长，表示方法为支持的模长按位或的结果）: " + str[5]);
        System.out.println("对称算法（所有支持的对称算法，表示方法为对称算法标识按位或的运算结果）: " + str[6]);
        System.out.println("支持的最大文件存储空间（单位字节）: " + Forms.bytes2int(Forms.hexStringToByte(str[7])));
        System.out.println("密码机内部 DMK 校验值: " +str[8]);
    }

    /**
     * 产生对称密钥
     *
     */
    
    public void genSymmKey() {
        try {
            ArrayList<byte[]> bytes = api.genSymmKey(7);
            System.out.println("LMK加密的对称秘钥：" + Forms.byteToHexString(bytes.get(0)));
            System.out.println("对称秘钥的校验值：" + Forms.byteToHexString(bytes.get(1)));
        } catch (TAException e) {
            System.out.println("需阻断处理");
        }
    }

    
    public void importSymmKey() {
        System.out.println("导入对称密钥");
        try {
            byte[] cipherByLMK = Forms.hexStringToByte("E009675342A94388ABBE7F2E5AA73BF9");
            byte[] keycv = Forms.hexStringToByte("D370B94818BAD5C3");
            api.importSymmKey(32,"SM4",cipherByLMK,keycv);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    ///////////////////////////////////////////////////////////////////////////
    // 1015 测试数据
    ///////////////////////////////////////////////////////////////////////////

    byte[] sm4Key = Forms.hexStringToByte("EE828FCCFAC494756468B1FECCE81192");
    byte[] sm4CV = Forms.hexStringToByte("BCC22E39C9B72764");

    byte[] sm4ProKeyCipher = Forms.hexStringToByte("7C78B0D533A10812FE9277504181C23F");
    byte[] sm4ProKeyCipherCV = Forms.hexStringToByte("8849C862448CFB73");

    byte[] newSM4 = Forms.hexStringToByte("AE62E4E90FA741090AECE0AC9923B885");
    byte[] newSM4KeyMAC = Forms.hexStringToByte("F7EBEA9FD38EBBD324E7EAAC9B7BE362");
    byte[] newSM4KeyTag = Forms.hexStringToByte("7C05A01A54B63CB90E0C8597DBED6D6D");

    byte[] sm4Key2 = Forms.hexStringToByte("40F7B1FA358855610EB13491B119A4AB");
    byte[] sm4Key2CV = Forms.hexStringToByte("955C2B5828299C51");

    /**
     * 产生对称密钥,保护密钥保护输出
     *
     */
    
    public void generateProtectionKey() {
        /**
         * sm4
         * LMK加密的对称秘钥：B36847D6E86EAB69E4EEB65558A2626C
         * 对称秘钥的校验值：713CA557C1FE2AAB
         */
        try{
            ArrayList<byte[]> bytes = api.proGenSymmKey(Forms.hexStringToByteArray("E2C1B24FCBCC6C636686A8D63C69103D"),
                    TACryptConst.KEY_ALG_SM4, Forms.hexStringToByteArray("766628420B8D506A"), TACryptConst.KEY_ALG_SM4, b,
                    TACryptConst.ENC_MODE_ECB,b, b);
            System.out.println("LMK加密的会话密钥密文：" + Forms.byteToHexString(bytes.get(0)));
            System.out.println("会话密钥的校验值：" + Forms.byteToHexString(bytes.get(1)));
            System.out.println("保护密钥加密的会话密钥密文：" + Forms.byteToHexString(bytes.get(2)));
            System.out.println("会话密钥的MAC值：" + Forms.byteToHexString(bytes.get(3)));
            System.out.println("tags：" + Forms.byteToHexString(bytes.get(4)));
            // -- CBC pro key
            //1473541D72C551B455FB57126A2B04FC
            //136628209768ED8E
            //D8288B8923EF1374B8295EE0AD8800EA4683C247A8A6389127ABF1B8FFBF2124
            //4683C247A8A6389127ABF1B8FFBF2124
        } catch (TAException e) {
            System.out.println("需阻断处理");
        }
    }

    /**
     * 对称密钥加解密数据
     *
     */

    public void generalDataEnc() {
        try {
            //sm4加解密
            byte[] bytes = api.symmKeyDataEnc(Forms.hexStringToByte(MGUtil.GetSM4Key()),TACryptConst.ENC_MODE_ECB,TACryptConst.KEY_TYPE_CIPHER, TACryptConst.KEY_ALG_SM4,
                    Padding.PKCS5Padding( "测试重点单位".getBytes(),16), b);
            System.out.println("SM4加密结果：" + Forms.byteToHexString(bytes));
            byte[] bytes1 = api.generalDataDec(Forms.hexStringToByte(MGUtil.GetSM4Key()),TACryptConst.ENC_MODE_ECB, TACryptConst.KEY_TYPE_CIPHER, TACryptConst.KEY_ALG_SM4,
                    bytes, b);
            System.out.println("SM4解密结果:" + new String(Padding.PKCS5UnPadding(bytes1,16)));
            //sm7加解密--依赖硬件
//        byte[] bytes2 = api.symmKeyDataEnc(Forms.hexStringToByte("201E878569D1A89C92A784CE2D9F2FEE"),TACryptConst.ENC_MODE_CBC,TACryptConst.KEY_TYPE_CIPHER, TACryptConst.KEY_ALG_SM7,
//                Padding.PKCS5Padding( "308201510201010420519eed92d60eeba4c32a8ab1eccc57351e5ebd990be37e059bef6ac657b1ba77a081e33081e0020101302c06072a8648ce3d0101022100fffffffeffffffffffffffffffffffffffffffff00000000ffffffffffffffff30440420fffffffeffffffffffffffffffffffffffffffff00000000fffffffffffffffc042028e9fa9e9d9f5e344d5a9e4bcf6509a7f39789f515ab8f92ddbcbd414d940e9304410432c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0022100fffffffeffffffffffffffffffffffff7203df6b21c6052b53bbf40939d54123020101a14403420004200906830f18b9102c033ea09734ecab63c84c84ea5491feb1b27e777b405acfaf6cc3eac09ac4b498911f2764bf96bc207c886b614398772eba27986377ec27".getBytes(),16), new byte[8]);
//        System.out.println("SM7加密结果：" + Forms.byteToHexString(bytes2));
//        byte[] bytes22 = api.generalDataDec(Forms.hexStringToByte("201E878569D1A89C92A784CE2D9F2FEE"),TACryptConst.ENC_MODE_CBC, TACryptConst.KEY_TYPE_CIPHER, TACryptConst.KEY_ALG_SM7,
//                bytes, new byte[8]);
//        System.out.println("SM7解密结果:" + new String(bytes22));
            //aes加解密
//            byte[] paddingData = Padding.PKCS5Padding(Forms.hexStringToByte("30820122300D06092A864886F70D01010105000382010F003082010A0282010100A636C484374F9F039EB4318952B6BA5ABBE096F2B37B12DBC71A09F3B7BEEB83EB4A4BBBBDBBCC9332168E336981C919EF8BB734B3671DFEDCB79459401F95DDAA4EACECB36599451F9F77F5B01BF6B6AA1F94DE8BE5ED8B7BD52CA94929F7B0D3E8F5FDAFA322538AE32F89D7E3C1E4203120EDE6F213A3848F8ECF9E6836BE369A4658B6EB14D2FD3681488A3207CE0A5A9088011B2DA893C7F2C674843BB5254C30CB67D9C8182FEF284BB5CD8A239D6411EA199AD8B93EBE3442716FDAB44FB3932248C076C8794725CEEB5B76674B2B6DC605DC0F9835C6CCBBE4807A4F925065E02C65CAFE2D80A275BF5D096D2E07BA9ED5A75A10D425B03B84BB57990203010001"), 16);
//            byte[] bytes3 = api.symmKeyDataEnc(26,TACryptConst.ENC_MODE_CBC,TACryptConst.KEY_TYPE_RULE, TACryptConst.KEY_ALG_AES128,
//                    paddingData, b);
//            System.out.println("AES加密结果：" + Forms.byteToHexString(bytes3));
//            byte[] bytes33 = api.generalDataDec(Forms.hexStringToByte("12E0927021F5AB498152FB544B067031"),TACryptConst.ENC_MODE_CBC, TACryptConst.KEY_TYPE_CIPHER, TACryptConst.KEY_ALG_AES128, bytes3, b);
//            System.out.println("AES解密结果:" + Forms.byteToHexString(bytes33));
        } catch (TAException e) {
            System.out.println("需阻断处理");
        }
    }

    private static volatile String jiami;

    private Boolean isJiaMi() {
        if (StringUtils.hasText(jiami)) {
            return Boolean.valueOf(jiami);
        }
        synchronized (TenantDatabaseUtil.class) {
            if (!StringUtils.hasText(jiami)) {
                jiami = ((Environment) SpringContextUtil.getBean(Environment.class)).getProperty("jiami");
                if (!StringUtils.hasText(jiami)) {
                    jiami = "true";
                }
            }
        }
        return Boolean.valueOf(jiami);
    }

    public String symmKeyDataEnc(String str) {
        if (Objects.equals(false,isJiaMi())){
            return str;
        }
        if (!StringUtils.hasText(str)) {
            return str;
        }
        System.out.println(str);
        try {
            byte[] bytes = api.symmKeyDataEnc(Forms.hexStringToByte(MGUtil.GetSM4Key()),TACryptConst.ENC_MODE_ECB,TACryptConst.KEY_TYPE_CIPHER, TACryptConst.KEY_ALG_SM4,
                    Padding.PKCS5Padding( str.getBytes(),16), b);
            return Forms.byteToHexString(bytes);
        }catch (Exception exception) {
            exception.printStackTrace();
        }
        return str;
    }

    public String generalDataDec(String str) {
        if (Objects.equals(false,isJiaMi())){
            return str;
        }
        if (!StringUtils.hasText(str)) {
            return str;
        }
        System.out.println(str);
        try {
            byte[] bytes = api.generalDataDec(Forms.hexStringToByte(MGUtil.GetSM4Key()),TACryptConst.ENC_MODE_ECB, TACryptConst.KEY_TYPE_CIPHER, TACryptConst.KEY_ALG_SM4,
                    Forms.hexStringToByte(str), b);
            return new String(Padding.PKCS5UnPadding(bytes,16));
        }catch (Exception exception) {
            exception.printStackTrace();
        }
        return str;
    }


    //1473541D72C551B455FB57126A2B04FC
    //136628209768ED8E
    //D8288B8923EF1374B8295EE0AD8800EA4683C247A8A6389127ABF1B8FFBF2124
    //4683C247A8A6389127ABF1B8FFBF2124

    /**
     * 对称密钥（受保护密钥保护）加解密数据
     *
     */
    
    public void protectionKeyEncrypt() {
        try {
            ArrayList<byte[]> bytes = api.proKeyEncData(sm4Key, TACryptConst.KEY_ALG_SM4, sm4CV,
                    Forms.hexStringToByte("C0C64CD82E3B2DC8C8F4D5A33F0EF6B4F5942AF6B880EE6A6AAB159C90C3F46175F2C068A54CF5BA4F0BCF7AC04E08E8"),
                    b, Forms.hexStringToByte("75F2C068A54CF5BA4F0BCF7AC04E08E8"), TACryptConst.ENC_MODE_CBC,
                    b, new byte[0], new byte[0], TACryptConst.KEY_ALG_AES256, 1, 3,
                    new byte[16], TACryptConst.KEY_ALG_SM4, TACryptConst.ENC_MODE_GCM,
                    "mingwenshuju".getBytes(), new byte[12], new byte[2]);
            System.out.println("密文： " + Forms.byteToHexString(bytes.get(0)));
            System.out.println("tag： " + Forms.byteToHexString(bytes.get(1)));

            byte[] bytes1 = api.proKeyDecData(sm4Key, TACryptConst.KEY_ALG_SM4, sm4CV, Forms.hexStringToByte("C0C64CD82E3B2DC8C8F4D5A33F0EF6B4F5942AF6B880EE6A6AAB159C90C3F46175F2C068A54CF5BA4F0BCF7AC04E08E8"), b, Forms.hexStringToByte("75F2C068A54CF5BA4F0BCF7AC04E08E8"), TACryptConst.ENC_MODE_CBC,
                    b, new byte[0], new byte[0], TACryptConst.KEY_ALG_AES256, 1, 3, new byte[16], TACryptConst.KEY_ALG_SM4, TACryptConst.ENC_MODE_GCM,
                    bytes.get(0), new byte[12], new byte[2], bytes.get(1));

            System.out.println("解密后的数据明文:" + new String(bytes1));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    byte[] srcRSACipher = Forms.hexStringToByte("83E265207D4566C7704DF9E6170181378CA028FB1EAA0BCB771DFD188CF5BEA899ECEF9213CA98D6D698CCE6072237768F514B04D68DA6B01400F69F93601976DCDFAE8F2EDDAA4F01BA8CE5E76A77AEB01BAB9D6E59A32B4E30B2B8D21D13B5C3510A1622190621BD3B0B5838A2CCBE423F4D3A7613CB69BBC9857E4BF5D08AAD77DDB96ECDD88989B885D44B909F502DC53A2FB4200FA714ECCFF100E7E986D76B68BD0BEFF5CA33CA698DA42F8B74FFBC09FB8F30483E416D0D2EAC6AF2B2A309F6762B5D292DA619C92428D1AB11A6931C81A859C79D8C01B441B1902ABE001BFF501DEE0E1E241E4567ECC74F9D4665AEA77C4F93AC312347A5087B686DC8361415A85197DB69CEEFD6D00CE94C34C290B8F79F10CC27A79D7C4D8F43736223576649E93457C75BA8C637927EC780A56B45163142DE1483777B4C8222C92B3C82AB372B3B0223D4EE246938EB85A7EC536DC77A291E152CF94E02465137DF2F25140669071913F868E58F379472235564F125B6C71C2705FE895ABEEFE33C656ACA7D489AD5C432B80AB9D8F732C03519F2E99F0DEAC4A7312FC351C059877BA09FB6455EFCB0D0DFE9F597416A5E1D88A7326C64D5539D91519935FADD5BE76EBB4D60FC57103CB8960890B4B1EC822C8D9781CF67B6DD1BE15E87406A0B0B5C06A69F6B07991C95B13CC0C4DBEA91589425E7C8D4E7CFE2CBBEC34D7705E8B52939D2E154B3435B7B4B8E41CD4DCEDF3892EF0F3352C8467CA46DB08A7DC93969E18B405F44508F919F4C0B3F2F7C0B79E661001B79FB0F0205A97CECFBE25DC4C711EA");

    byte[] srcRSACipherMAC = Forms.hexStringToByte("948D9944793CAFAB372E54468349B3E5");

    byte[] srcRSACipherTag = Forms.hexStringToByte("9C8A7CB4C6D1AE08775F0681ED497EDF");

    byte[] srcRSApublicKey = Forms.hexStringToByteArray("308186028180E14CAAFFCEC6D014457D7CA3E943DBABA1299BDBC17690C8E70F7BFA10EA02450805DA4C6CDC38BFBF1349C95B81A88177BA31C08E366EF965CA41EB36A2DACE611B80A752615A094B8291AAB6F8BB3A5894E72842371F34FA04C10DF42C2FEA95C51B9D49BE8B795E10474954FE01BAAC63532520069465FA62EDB266AADEBB020103");
    /**
     * RSA LMK加密的私钥
     */
    byte[] srcRSAprivateKey = Forms.hexStringToByteArray


    byte[] srcSM2Cipher = Forms.hexStringToByte("83E260209C09CEF21E1AD68B09EC5FA762164497DB6D7C6EEA5D58D14F7C0B8D670537112DFB030F");

    byte[] srcSM2CipherMAC = Forms.hexStringToByte("7DF725131F3E67547F029550F2F073E9");

    byte[] srcSM2CipherTag = Forms.hexStringToByte("A2181C58228D7A32AE37C072987D1B7E");

    byte[] srcSM2publicKey = Forms.hexStringToByteArray("3059301306072A8648CE3D020106082A811CCF5501822D03420004549EAF3A09B4F486171FF320B81C4037286FC68026AA6E0101D3108C0573CFB0FF431DF8D3F9E5A31C7DE80940637E036B2D6FD36A0F586D4CDC3A610A269E89");

    byte[] srcSM2privateKey = Forms.hexStringToByteArray("79E62264C314D1D3279D9B7752CD137AD4095864801607EB52B6AB9C6ADBF2BC777F8CBE7EC55699");


    /**
     * 大数据包加解密
     */
    
    public void bigDataEnc() {
        try {
            String bigStr = "";
            byte[] enc = api.bigDataEnc(Forms.hexStringToByteArray("B8F1822D0BCC27263BCE5BEA11217890"), "SM4/CBC/PKCS5Padding", bigStr.getBytes(), new byte[16]);
            System.out.println(Forms.byteToHexString(enc));
            byte[] dec = api.bigDataDec(Forms.hexStringToByteArray("B8F1822D0BCC27263BCE5BEA11217890"), "SM4/CBC/PKCS5Padding", enc, new byte[16]);
            System.out.println(new String(dec));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }


    /**
     * 计算MAC、校验Mac
     */
    
    public void mac() {
        try {
            byte[] bytes = api.calMac(1, 0, 2, sm4Key, 7, "1111111111111111".getBytes(),
                    new byte[16]);
            System.out.println("计算MAC结果：" + Forms.byteToHexString(bytes));
            boolean b = false;
            b = api.verifyMAC(1, 0, 2, sm4Key, 7, "1111111111111111".getBytes(),
                    new byte[16], bytes);
            System.out.println("校验MAC结果：" + b);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    
    public void countDataMAC() {
        byte[] keyCiphertext = Forms.hexStringToByte("2B21E75004E96CAF428C78C20FB3FFC4");
        byte[] macData = Forms.hexStringToByte("1234567812345678");
        try {
            byte[] bytes = api.countDataMAC(01, 01, 0, 7, keyCiphertext, 0, "", 00, "", 00, macData, new byte[16]);
            System.out.println(Forms.byteToHexString(bytes));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }


    /**
     * 计算HMAC
     */
    
    public void hmac() {
        try {
            ArrayList<byte[]> hmac = api.hmac(20, 0, 2, sm4Key, new byte[0], "shuyaojisuandeshuju".getBytes());
            for (int i = 0; i < hmac.size(); i++) {
                System.out.println(Forms.byteToHexString(hmac.get(i)));
            }
            ArrayList<byte[]> hmac1 = api.hmac(20, 0, 1, Forms.hexStringToByte("00000000000000000000000000000000"), new byte[0], Forms.hexStringToByte("D5127D0F4F34F13EBC806BCB54726F76"));
            for (int i = 0; i < hmac1.size(); i++) {
                System.out.println(Forms.byteToHexString(hmac1.get(i)));
            }
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * 产生RSA算法密钥对,私钥由LMK加密输出
     */
    
    public void generateRSAKeyPair() {
        ArrayList<byte[]> bytes = null;
        try {
            bytes = api.genRSAKey(4096, 65537);
            bytes = api.genRSAKey(1152, 3);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
        System.out.println("DER编码的公钥：" + Forms.byteToHexString(bytes.get(0)));
        System.out.println("LMK加密的私钥：" + Forms.byteToHexString(bytes.get(1)));
    }


    /**
     * 产生RSA密钥对,保护密钥加密输出
     */
    
    public void protectionKeyRSA() {
        try {
            ArrayList<byte[]> bytes = api.proGenRSAKey(sm4Key, TACryptConst.KEY_ALG_SM4, sm4CV, 2048, 3,
                    b, TACryptConst.ENC_MODE_ECB, b, new byte[2]);
            System.out.println("DER编码的公钥：" + Forms.byteToHexString(bytes.get(0)));
            System.out.println("LMK加密的私钥：" + Forms.byteToHexString(bytes.get(1)));
            System.out.println("保护密钥加密私钥的密文：" + Forms.byteToHexString(bytes.get(2)));
            System.out.println("非对称私钥MAC的长度：" + Forms.byteToHexString(bytes.get(3)));
        } catch (TAException | IOException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * RSA 私钥签名 验签
     */
    byte[] privateRSA = Forms.hexStringToByte("000204B07672172F114E8E847A5FB9EC3DD32CD1F063E78FE16508F3E13DDCEE227447EBE13DDCEE227447EB1BEF38C9F192F3D8744615657FAB570E313F5722E05D34ED79B6FA07960ECDBF9B74ECAD19329FF2C1BC33C59AC27E7AD330BA15E6B56EAEC51D8E71E02F30646EF7B183E8874C9F03976FFDD55DD9EAD37C504BEB672FDE64FD4E1E71746B6ACA7C12B276DF41201C01BCA3F691BB795D2BD8D9B93608D851432AD80B90B77980FB29955BF33EDC5E602B59DB989D4C244EB2CAB9AC601C1C8B6DF32BAF3B69CAF9C53D9FF996961E54A83415265ECE973DE7F31E57E81E94094B4F40E02C513EC41D16C40B765A17F64D7903D3F29D335A9B0D8B7931D8FA7C289095502870856B92A7AC6B2E7A5E53DED6E4A40C7D1A3A178B6F7371254599A784C7707738972FDE3074D45D4B52AC9C89A6ADF51C0A1A1BD2E553AD1B12035134842C2EADF21D782D270822EAC470C1D91E001FE1829E8A8614570A8AE370059FA46246E789EDE1968FE7B90480ECF98653115FD1116A5169D103B3A2E08A500AAE6EA565816BF56B92603F09B0953FE85DDB86AB865FFF9D243143AF05A48B07149AFD5D055AF5435ADF4486C4DC18A80ECA4248422F6B2D9DB6342FF79A80C674202F94E06B4A04B2B170769A2D205DA9046BDCF1C316B864D05FC54A5BB73CCF2D9B509BE50C58B733A1CE772A1B01CDA13F339AE3219760C397CDC5631D7C9A031316063A7A690DC70F5B27724F73FB65BF971C5DD8FA43592F480E244A5FAF36352825B781D5F9E4CA6ABA75B89DEB24434B8C9480F9C438F9E05C148A31706D536F74AD7808B676057BC25B118C0B945A28242C26B9E4E0085DFE424C61719FD1881864812CCDCF1ED3B3B2E49BF9CD7CE19D7DCBC77A948BDC9D1B846E0DA6DFAB0FCDD6EEC5490D703C31F877484C436684BF36C342AA4B2ECFD272ADC48D86EC7C9DF8A6430B71779CB3EC224454EA7B569DDB3DD945850F21D7B10BAC5A119BC813CC521148D413861533444622FF55F85DEDA48B1468D170A90C678CC3F2AAD4B2AF4F67429701EFD984067ED767A33C3DDC1D17ECF6782CF4E4F4332245D643F9831FB9F02BC6899F158323D7ABDE233B8E3FDC5FDFD0B37C588A795237AB90D20B38A6AA621B03946FCB56B9E559A5B79129B37190C49DE9A491F39F65090EE7AB32192EF378881FA872F4DE0787501C814199A4CBFAA397F46189EAB07ED418C9A399095EE6918CB1968CA2B3619C21F0E26CCD775107C91BCD30027FCCA1B79B7712B314BE0D1D001336F8993CC52084256F8F419C7240F1979D0AB6FC87AC444DE53D7EEA9CFD5F729B4D46CCA0A78E3D2743F474A9DA86F3FE6C84C57345492C744B3D615D61D99C9527DFCECB4E3C8404ECD5C8613E4E73362EEB5AA8EE76C1C032DBA10D7170EC5EFF882BA33600A53DA5166960E0A608C38D9C245E5491555EDA7C488457B74CF5DD69761129F43C303A058F435DB1402A5D636DDAAC2A972DC0C6EE840DE64E5ABAC18CCC1604A0D955C7E57BE8D1E66AE14CFE4260F1590D93B22F5FE48B30A5F6E92340A11D940449FD91305AACC57C3C42D53040FC0989DB11D1A5FDF7A3B206EA5DC9325B497A7726841B39D1BCEEE6D8C987A7C2687B390FA0BE767560B765A1177F554BA093286EE509F1034EBF226C5BF5A38E0CE4BC4BD2");
    byte[] publicRSA = Forms.hexStringToByte("3082010A0282010100CDFA3E3D7EF1A411A53E9FAFB17CCC62F63A49B5B925115CBD4FCFCA1B604CB1A5ECC044E1C481C1DE7DFBD16E7590E12FC4C02C16559D26AEF35BD571CB729A2C9642EB6FD50B9743F47F01F5C8B9562FA976D39528087BECD8EA55DE86D0BEA8D5F5113A1821B0553DB06F53F968A0837D05447089991289ED55CA03C8A253259E038A9C923339DD3BE54DC2D83A6B8A91F61ADC1E4C81FAE5243520722A088523195A855F3400FB29C14923CB35A891F7CDEAE81944703EC36C407EA4806E21F31D6CCA69DB0468795AC586541EED60CF1C6223A8CF81CD142EA4269463A586550B0A234240FE272984E6E3EE697B1138F1CBB56C5FFFBD82352C1C01431D0203010001");
    byte[] publicR77 = Forms.hexStringToByte("3082010A0282010100A636C484374F9F039EB4318952B6BA5ABBE096F2B37B12DBC71A09F3B7BEEB83EB4A4BBBBDBBCC9332168E336981C919EF8BB734B3671DFEDCB79459401F95DDAA4EACECB36599451F9F77F5B01BF6B6AA1F94DE8BE5ED8B7BD52CA94929F7B0D3E8F5FDAFA322538AE32F89D7E3C1E4203120EDE6F213A3848F8ECF9E6836BE369A4658B6EB14D2FD3681488A3207CE0A5A9088011B2DA893C7F2C674843BB5254C30CB67D9C8182FEF284BB5CD8A239D6411EA199AD8B93EBE3442716FDAB44FB3932248C076C8794725CEEB5B76674B2B6DC605DC0F9835C6CCBBE4807A4F925065E02C65CAFE2D80A275BF5D096D2E07BA9ED5A75A10D425B03B84BB57990203010001");
    
    public void RSApriSign() {
        try {
            byte[] bytes = api.RSAPriKeySign(privateRSA, TACryptConst.PADDING_MODE_PSS, TACryptConst.DIGEST_ALG_SHA256, 1,
                    6, 94, Forms.hexStringToByte("9ECA5459BA0B5CA0CCBB2A01EA05DE319C9E97DF730F0E2A55E9DC2B6FFA85CE"));
            byte[] bytes1 = api.RSAPriKeySign(privateRSA, TACryptConst.PADDING_MODE_PKCS15, 4, 0,
                    0, 0, Forms.hexStringToByte("4362C717546C641B5E95ECA5D74C1DE4CA32CC1873ECB6F51D24192757253A7BE4EF107A3DDBACBC3786A5505FC8976A9BB330BBF28A9963EC0E08CBA15B8377"));
            System.out.println("签名结果：" + Forms.byteToHexString(bytes1));
            boolean b = api.RSAPubVerify(publicRSA, TACryptConst.PADDING_MODE_PSS, TACryptConst.DIGEST_ALG_SHA256, 1,
                    6, 94, bytes, Forms.hexStringToByte("9ECA5459BA0B5CA0CCBB2A01EA05DE319C9E97DF730F0E2A55E9DC2B6FFA85CE"));
            System.out.println("验签结果：" + b);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * RSA加解密运算
     */
    
    public void RSAencdata() {
        try {
//        byte[] bytes = api.RSAPubEncData(11, 1, TACryptConst.DIGEST_ALG_SHA256, new byte[0], Forms.hexStringToByte("{createTime=1606380202000, createUserId=144, ip=124.204.68.242, key=SYJHD202011266020179058, orderNumber=SYJHD202011266020179058, productId=161391, scene=SYJHD}"));
            byte[] bytes = api.RSAPubEncData(publicRSA,
                    1,
                    null,
                    null,
                    Forms.hexStringToByte("{createTime=1606380202000, createUserId=144, ip=124.204.68.242, key=SYJHD202011266020179058, orderNumber=SYJHD202011266020179058, productId=161391, scene=SYJHD}"));
            System.out.println("公钥加密结果：" + Forms.byteToHexString(bytes));
            byte[] bytes1 = api.RSAPriDecData(privateRSA, 1, TACryptConst.DIGEST_ALG_SHA256, new byte[0], bytes);
            System.out.println("私钥解密结果：" + Forms.byteToHexString(bytes1));
            // 8D63A2216BA7430C3689ED160B65FDACF5AE4D6F8B7484181A4E3B2F35DAB054054560D777FC24ABB804BFE9016CE949C5A16475144FDA1CD071268BBD9FF5A54B0FD982A38AD97A18BB7794104A7273E28DCBF283759D23158A715A3A672336FD021E822E7539643FA1C8BAFC94CEFEEB39EE087DC7749165EA8B4CAD170875
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }

    }

    /**
     * RSA私钥解密,私钥受保护密钥保护
     */
    
    public void priDecryptRSA() {
        try {
            byte[] bytes = api.proRSAPriKeyDec(sm4Key, TACryptConst.KEY_ALG_SM4, sm4CV, srcRSACipher, b, srcRSACipherMAC, TACryptConst.DIGEST_ALG_SHA256,
                    b, new byte[2], srcRSACipherTag, 2, TACryptConst.MGF, TACryptConst.DIGEST_ALG_SHA256, new byte[0], Forms.hexStringToByteArray("BFA03DB9BD0A4DE4809B59B04BF663E8E541B0CF0017E0337342B8F7CDEB210C86429D87A51A7E2B4ED760C4BB49A1AD1DE0353B3204D39C8F6FF9DB789C8DEDCDD84012DDB532F3E4554F0C85DCEF1C7241C98888F9CC57D04E902ABD2F422884235FD9E0A80116771AC436ED1EDE46CF272FD1DD4D3A5174D2D178D9A21F3D"));
            System.out.println("解密后的明文数据：" + Forms.byteToHexString(bytes));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * RSA私钥签名,私钥受保护密钥保护
     */
    
    public void privateSignRSA() {
        try {
            byte[] bytes = api.proRSAPriKeyDecSign(sm4Key, TACryptConst.KEY_ALG_SM4, sm4CV, srcRSACipher, b, srcRSACipherMAC, TACryptConst.DIGEST_ALG_SHA256,
                    b, new byte[2], srcRSACipherTag, TACryptConst.DIGEST_ALG_SHA256, "1234567890".getBytes(), TACryptConst.PADDING_MODE_PSS, TACryptConst.MGF, TACryptConst.DIGEST_ALG_SHA256, 10);

            System.out.println("签名结果：" + Forms.byteToHexString(bytes));
            boolean b = api.RSAPubVerify(srcRSApublicKey, TACryptConst.PADDING_MODE_PSS, TACryptConst.DIGEST_ALG_SHA256, TACryptConst.MGF, TACryptConst.DIGEST_ALG_SHA256, 10, bytes, "1234567890".getBytes());
            System.out.println("验签结果：" + b);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * RSA非对称密钥转加密，由保护密钥1转为保护密钥2加密
     */
    
    public void RSAConversionEncryption() {
        try {
            ArrayList<byte[]> bytes = api.conversionEncryption(0, TACryptConst.KEY_ALG_SM4, sm4Key, sm4CV, TACryptConst.KEY_TYPE_RSA,
                    -1, srcRSACipher, b, srcRSACipherMAC, TACryptConst.ENC_MODE_GCM, b, new byte[2], srcRSACipherTag,
                    0,
                    TACryptConst.KEY_ALG_SM4, sm4Key2, sm4Key2CV, b, TACryptConst.ENC_MODE_ECB, b, new byte[2]);
            for (int i = 0; i < bytes.size(); i++) {
                System.out.println("第" + i + "个===" + Forms.byteToHexString(bytes.get(i)));
            }
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻塞处理");
        }
        //第0个
        //第1个
        //第2个===51619322832F179121C8B35D89EA071B
        //第3个===02F68BB9B42E39F51A590104797FFFDA
    }

    /**
     * RSA非对称密钥保护导入对称密钥
     */
    
    public void tets1() {
        try {
            ArrayList<byte[]> bytes = api.RSAProImplSymm(srcRSAprivateKey, 2, TACryptConst.DIGEST_ALG_SHA256, new byte[10], 200,
                    TACryptConst.KEY_ALG_SM4, Forms.hexStringToByteArray("5C59EBCD0A48E51038853E490C76AD83122964E3AA3EAB660966F67DE56722D02E3B477D257BDDB90CA2F901254544933BD0852BCF6E466CE91813AACF8A4AD2C65F2B78888AE249A948BCDCF3E2D0CDCC70DC3BA9445D3237B6D56A701D17E95576AD4FCF0A1D20DC5A0AAB878DADC04903CCE5B3D06219FDB4497905FBEA9E"),
                    String.valueOf(System.currentTimeMillis()).getBytes());
            System.out.println("LMK加密的对称秘钥：" + Forms.byteToHexString(bytes.get(0)));
            System.out.println("对称秘钥的校验值：" + Forms.byteToHexString(bytes.get(1)));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /* ***************************************************************************************************** */

    /**
     * 产生SM2/ECC密钥对,保护密钥加密输出
     */
    
    public void generateProtectionKeySM2() {
        try {
//        ArrayList<byte[]> bytes = api.proGenSM2OrECCKey (sm4Key, TACryptConst.KEY_ALG_SM4, sm4CV, 0x0007,
//                b, TACryptConst.ENC_MODE_GCM, b, new byte[16]);
            ArrayList<byte[]> bytes = api.proGenSM2OrECCKey(sm4Key, TACryptConst.KEY_ALG_SM4, sm4CV, 0x0007,
                    b, TACryptConst.ENC_MODE_ECB, b, new byte[0]);
            System.out.println("DER编码的公钥：" + Forms.byteToHexString(bytes.get(0)));
            System.out.println("LMK加密的私钥：" + Forms.byteToHexString(bytes.get(1)));
            System.out.println("保护密钥加密私钥的密文：" + Forms.byteToHexString(bytes.get(2)));
            System.out.println("非对称私钥MAC：" + Forms.byteToHexString(bytes.get(3)));
//        System.out.println("tags：" + Forms.byteToHexString(bytes.get(4)));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }

        // ECC
        //第0个===3056301006072A8648CE3D020106052B8104000A0342000453701CD41CF4C3F1AA33158A1D1651F7BD1F7A5A94A3E8ED5015115F81E9FDD66B39CC26AB1ED88876108D287A67FD14F1C4D2A91489C46B5C3B9E4F8432468B
        //第1个===5955A9429384808E02312BE066678442104F4B8FDF6C510FE4A5ED3B30CD4430538ABBF6CB91889B
        //第2个===83E260209C09CEF28D853D663BE775E995D41CFE9B6AA4DC36BC6953B5895AB44DA1B9BC0202CC3B
        //第3个===89E13CBDDAD10E272E0941EA45EA193C
        //第4个===3ED6120998FF816AC5BA29F621B4B991

        // sm2

        //第0个===3059301306072A8648CE3D020106082A811CCF5501822D03420004E70CB95894768A69B5A184C17B31251710B2B870BB99E0BE150EA2FAF1F4CEECF6B48055A4C790CDE94A1B179CC12A39A856755F6677E87905BD903987425AF3
        //第1个===4F23C664B68C8A38B31F52727C856211D8D21B1AC76F300D2CD027E5AFD566976CEA234A749F031D
        //第2个===83E260209C09CC3F010349772852D7CD2C3C77DAEBA956791067754DA7FCFD8880E68AC28BFFF0F3
        //第3个===8184BE3669B2D12AEB673814E59E7700
        //第4个===8FD638CA4D7640BDE213F5777253D192
    }

    /**
     * 产生SM2算法密钥对,私钥由LMK加密输出
     */
    
    public void generateSM2Key() {
        ArrayList<byte[]> bytes = null;
        try {
            bytes = api.genSM2Key();
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻塞处理");
        }
        System.out.println("DER编码的公钥：" + Forms.byteToHexString(bytes.get(0)));
        System.out.println("LMK加密的私钥：" + Forms.byteToHexString(bytes.get(1)));
    }

    /**
     * 产生ECC算法密钥对,私钥由LMK加密输出
     */
    
    public void generateECCKey() {
        ArrayList<byte[]> bytes = null;
        try {
            bytes = api.genECCKey(0x0007);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻塞处理");
        }
        System.out.println("DER编码的公钥：" + Forms.byteToHexString(bytes.get(0)));
        System.out.println("LMK加密的私钥：" + Forms.byteToHexString(bytes.get(1)));
        //第0个===305A301406072A8648CE3D020106092B2403030208010107034200040A8D16377FA121AA658ECF1E2E8A2BD1FF16D808B316A3009A886ED95966B27D7F818B2492B04AD2BA0D03C4DDF1E76F8AD614A0E22579E6CB9D0A6D9AA3F218
        //第1个===8D4DE4697BD8FDC9247CE150E17A3E829AF61B60722384ADC1182F7354192F0C66AE64A72ADA4963
    }


    
    public void SM2Sign() {
        try {
            byte[] baInData = "2222222222222222".getBytes();
            //计算SM3摘要
            System.out.println("数据摘要：SM3");
            String sAlg = "SM3";
            byte[] baUserId = new byte[0];
            byte[] baPubKey = Forms.hexStringToByteArray("3059301306072A8648CE3D020106082A811CCF5501822D03420004A45246028D1FE13EAA9BAE7F47929AE6F9993CEEFEA16EB1358526C8D85277BD63F2EB9A1AD40BEEE37267F8F1F97E67BCE29A4E1CCAB0979A1E85F81010E042");
            byte[] baHashInitRes = api.HashInit(sAlg, baUserId, baPubKey);
            byte[] baHashUpdateRes = api.HashUpdate(baHashInitRes, baInData);
            byte[] baHashSm3 = api.HashFinalize(baHashUpdateRes);
            System.out.println(String.format("数据摘要: %s", Forms.byteToHexString(baHashSm3)));


            //非对称密钥签名验签
            System.out.println("数据非对称签名验签：SM2");

            int iCurveId = 0x0007;
            System.out.println(String.format("数据原文（哈希值）: %s", Forms.byteToHexString(baHashSm3)));

            byte[] baSignatureSm2 = api.priKeySign(iCurveId, privateKeySM2, baHashSm3);
            System.out.println(String.format("数据签名: %s", Forms.byteToHexString(baSignatureSm2)));
            boolean blVerifyResSm2 = api.pubKeyVerify(iCurveId, publicKeySM2DER, baHashSm3, baSignatureSm2);
            System.out.println("验签结果：" + blVerifyResSm2);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }


    byte[] sm2 = Forms.hexStringToByte("3059301306072A8648CE3D020106082A811CCF5501822D03420004E70CB95894768A69B5A184C17B31251710B2B870BB99E0BE150EA2FAF1F4CEECF6B48055A4C790CDE94A1B179CC12A39A856755F6677E87905BD903987425AF3");

    byte[] sm2PrivateKey = Forms.hexStringToByte("4F23C664B68C8A38B31F52727C856211D8D21B1AC76F300D2CD027E5AFD566976CEA234A749F031D");

    /**
     * SM2加密解密运算
     */
    
    public void TestSM2EncAndDec() {
        try {
            byte[] bytes = api.SM2PubKeyEnc(888, Forms.hexStringToByte("11111111111111111111111111111111"));
            System.out.println("加密结果：" + Forms.byteToHexString(bytes));

            byte[] bytes1 = api.SM2PriKeyDec(888, bytes);
            System.out.println("解密结果：" + Forms.byteToHexString(bytes1));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }


    //第0个===3059301306072A8648CE3D020106082A811CCF5501822D03420004E70CB95894768A69B5A184C17B31251710B2B870BB99E0BE150EA2FAF1F4CEECF6B48055A4C790CDE94A1B179CC12A39A856755F6677E87905BD903987425AF3
    //第1个===4F23C664B68C8A38B31F52727C856211D8D21B1AC76F300D2CD027E5AFD566976CEA234A749F031D
    //第2个===83E260209C09CC3F010349772852D7CD2C3C77DAEBA956791067754DA7FCFD8880E68AC28BFFF0F3
    //第3个===8184BE3669B2D12AEB673814E59E7700
    //第4个===8FD638CA4D7640BDE213F5777253D192

    byte[] sm2Key = Forms.hexStringToByte("3059301306072A8648CE3D020106082A811CCF5501822D03420004E70CB95894768A69B5A184C17B31251710B2B870BB99E0BE150EA2FAF1F4CEECF6B48055A4C790CDE94A1B179CC12A39A856755F6677E87905BD903987425AF3");
    byte[] sm2Cipher = Forms.hexStringToByte("83E260209C09CC3F010349772852D7CD2C3C77DAEBA956791067754DA7FCFD8880E68AC28BFFF0F3");
    byte[] sm2CipherMAC = Forms.hexStringToByte("8184BE3669B2D12AEB673814E59E7700");
    byte[] sm2CipherTag = Forms.hexStringToByte("8FD638CA4D7640BDE213F5777253D192");
    byte[] sm2PriKey = Forms.hexStringToByte("4F23C664B68C8A38B31F52727C856211D8D21B1AC76F300D2CD027E5AFD566976CEA234A749F031D");


    /**
     * ECC/SM2私钥解密,私钥受保护密钥保护
     */
    
    public void protectionPrivateKeyDecrypt() {
        try {
            byte[] bytes = api.proPriKeyDec(sm4Key, TACryptConst.KEY_ALG_SM4, sm4CV, sm2Cipher, b, sm2CipherMAC, TACryptConst.ENC_MODE_GCM,
                    b, new byte[2], sm2CipherTag, Forms.hexStringToByteArray("E9C17D82604F992BB3AB8FE0F766441DACC05EB779D1D1CC9C5FEFF671739A87274713242CBBA04161C3994EA264C30D82BB6DAF8E688D3BADC8768A18226D8EAEB984E5EA739C2E8792921F02AA612F5AB732FACEC8316B880499E6E70260333E9F29CEBCF3F8E10C151F79445276F6"));
            System.out.println("解密后的数据明文：" + Forms.byteToHexString(bytes));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * ECC/SM2私钥签名,私钥受保护密钥保护
     */
    
    public void privateSignSM2() {
        try {
            byte[] bytes = api.proPriKeySign(sm4Key, TACryptConst.KEY_ALG_SM4, sm4CV, sm2Cipher, b, sm2CipherMAC, TACryptConst.ENC_MODE_GCM,
                    b, new byte[2], sm2CipherTag, Forms.hexStringToByteArray("20D90A83A4654FB89AD97E7FF9B178BAA58E12CE8E5C16DE0371B374F76DEFA5"));
            System.out.println("ECC/SM2私钥签名结果（私钥受保护密钥保护）：" + Forms.byteToHexString(bytes));
            byte[] bytes1 = api.proPriKeySign(sm4Key, TACryptConst.KEY_ALG_SM4, sm4CV,
                    Forms.hexStringToByte("6FAE51038F6AA21F820C4169B4A64C989FE43B1D59A2B6972D8706EB4E6E251F9BD330C28363D58B5CF2214FA73EB14E"),
                    b,
                    Forms.hexStringToByteArray("4AB3EEA8C1943442CC2D9D4B9900668A"), TACryptConst.ENC_MODE_ECB,
                    b, new byte[2], sm2CipherTag, Forms.hexStringToByteArray("20D90A83A4654FB89AD97E7FF9B178BAA58E12CE8E5C16DE0371B374F76DEFA5"));
            System.out.println("ECC/SM2私钥签名结果（私钥受保护密钥保护）ECB模式：" + Forms.byteToHexString(bytes1));
            boolean b = api.pubKeyVerify(7, sm2Key,
                    Forms.hexStringToByteArray("20D90A83A4654FB89AD97E7FF9B178BAA58E12CE8E5C16DE0371B374F76DEFA5"), bytes);
            System.out.println("ECC/SM2公钥验签结果（私钥受保护密钥保护）" + b);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * SM2非对称密钥保护导入对称密钥
     */
    
    public void SM2ImplKEK() {
        try {
            ArrayList<byte[]> bytes = api.SM2ImplKEK(sm2PriKey, 300, TACryptConst.KEY_ALG_SM4,
                    Forms.hexStringToByteArray("9A9161F87BCBD3E9BC8866B8706E8F75B682DA2712E7E32A5D0E4867700D8233284BF4EA98E352BE74817D240D92347F969809BA54626192102086000756E2CFD98A3CC8923513B3BF72FA33B39CB999E15613440F2DAD9AE786E3D73349D78FA7915B3CB633EFD9A88E638D93297934"),
                    String.valueOf(System.currentTimeMillis()).getBytes());
            System.out.println("LMK加密的对称秘钥：" + Forms.byteToHexString(bytes.get(0)));
            System.out.println("对称秘钥的校验值：" + Forms.byteToHexString(bytes.get(1)));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * SM2/ECC非对称转加密
     */
    
    public void conversionEncryption() {
        try {
            ArrayList<byte[]> bytes = api.conversionEncryption(0, TACryptConst.KEY_ALG_SM4, sm4Key, sm4CV, 2,
                    -1, sm2Cipher, b, sm2CipherMAC, TACryptConst.ENC_MODE_GCM, b, new byte[2], sm2CipherTag, 0,
                    TACryptConst.KEY_ALG_SM4, sm4Key2, sm4Key2CV, b, TACryptConst.ENC_MODE_GCM, b, new byte[2]);
            for (int i = 0; i < bytes.size(); i++) {
                System.out.println("第" + i + "个===" + Forms.byteToHexString(bytes.get(i)));
            }
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻塞处理");
        }
    }

    /**
     * 摘要运算，填充摘要数据
     */
    
    public void testGenHash() {
        byte[] hash = genHash();
        System.out.println("摘要结果:" + Forms.byteToHexString(hash));

        // 计算校验正确摘要结果
        String string = "704423DF78242B08E821F7F8FA05A5325AA1BD842BE4EB9827C765DFFF434C1A";

        byte[] bytes3 = genHash();
        System.out.println("验证结果：" + Arrays.equals(Forms.hexStringToByteArray(string),bytes3));

        String wrongHash = "669523DF78242B08E821F7F8FA05A5325AA1KD842BE4EB9827C765DFFF434C1A";

        System.out.println("错误验证结果：" + Arrays.equals(Forms.hexStringToByteArray(wrongHash),bytes3));
    }
    public byte[] genHash() {
        try {
            byte[] bytes2 = api.HashInit("SM3", Forms.hexStringToByte("31323334353637383132333435363738"), publicKeySM2DER);
            byte[] bytes = api.HashUpdate(bytes2, Forms.hexStringToByteArray("1234567890"));
            byte[] bytes1 = api.HashFinalize(bytes);
            return bytes1;
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
            return null;
        }
    }

    
    public void findIndex() {
        int index = 0;
        try {
            index = api.findIndex(0, "Gaozy-GHSM-Test-SM4".getBytes());
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
        System.out.println(index);
    }

    
    public void testBigHash() {
        try {
            //init 初始化 返回上下文数据用于update
            byte[] hashInit = api.HashInit("SM3", new byte[0], Forms.hexStringToByte("3059301306072A8648CE3D020106082A811CCF5501822D03420004B33D8A2F9E1E1FCA2E8CECCFFB166F52CC2ED0589C25464D0EF85DC87E0537DC16C0D542A53790967A1368B7084F6EFED51FC848D1E3B5370A99BDCB64D17C2F"));
            //update 可以多次调用 每次数据限制4k  第一次update是init返回的上下文，第二次update 是第一次update返回的上下文 以此类推
            byte[] hashUpdate1 = api.HashUpdate(hashInit, Forms.hexStringToByteArray("1234567890"));
            byte[] hashUpdate2 = api.HashUpdate(hashUpdate1, Forms.hexStringToByteArray("1234567890"));
            byte[] hashUpdate3 = api.HashUpdate(hashUpdate2, Forms.hexStringToByteArray("1234567890"));
            //finalize  数据的hash  传最后一次update返回的上下文
            byte[] bytes1 = api.HashFinalize(hashUpdate3);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    
    public void testBigHash2(){
        //大报文计算hash的demo，请测试后使用
        byte[] bytes = new byte[0];
        try {
            bytes = genSM3Hash(new byte[4096*2+3]);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻塞性处理");
        }
        System.out.println("hash: "+Forms.byteToHexString(bytes));
    }
    public byte[] genSM3Hash(byte[] data) throws TAException {
        byte[] hashInitRes = api.HashInit("SM3", new byte[0], new byte[0]);
        //分段切割数据的起始位置
        int start = 0;
        //update的上下文
        byte[] hashUpdateRes;
        //大与8192字节则多次调用update
        if (data.length > 8192) {
            byte[] tempData = new byte[8192];
            System.arraycopy(data, start, tempData, 0, 8192);
            hashUpdateRes = api.HashUpdate(hashInitRes, tempData);
            start += 8192;
            //计算循环次数（-1是因为上面已经调用过一次了）
            int times = (int) Math.ceil(data.length / 8192.0) - 1;
            //循环调用
            for (int i = 0; i < times; i++) {
                int length = Math.min(8192, data.length - start);
                tempData = new byte[length];
                //截取要进行update的byte数组
                System.arraycopy(data, start, tempData, 0, length);
                hashUpdateRes = api.HashUpdate(hashUpdateRes, tempData);
                start += 8192;
            }
        } else {
            hashUpdateRes = api.HashUpdate(hashInitRes, data);
        }
        byte[] bytes = api.HashFinalize(hashUpdateRes);
        return bytes;
    }


    /**
     * 产生随机数
     */
    
    public void genRandom() {
        try {
            String s = api.genRandom(15);
            System.out.println(s);
            byte[] bytes = api.genRandomToEx(1024 * 8);
            System.out.println(Forms.byteToHexString(bytes));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * 获取加密机状态
     */
    
    public void getHSMstatus() {
        try {
            String hsMstatus = api.getHSMstatus();
            System.out.println(hsMstatus);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * lmk to kek
     */
    
    public void test3() {
        try{
            ArrayList<byte[]> bytes = api.LMKToKEK(TACryptConst.KEY_ALG_SM4, TACryptConst.ENC_MODE_GCM, b,
                    new byte[2], 0, sm4Key,
                    new byte[0], new byte[0], 5, 0,
                    1, 0, TACryptConst.KEY_ALG_SM4,
                    sm4Key2, new byte[16]);
            System.out.println("使用保护密钥加密密钥密文：" + Forms.byteToHexString(bytes.get(0)));
            System.out.println("当选择产生MAC时，输出MAC：" + Forms.byteToHexString(bytes.get(1)));
            System.out.println("tags：" + Forms.byteToHexString(bytes.get(2)));
            System.out.println("密钥校验值：" + Forms.byteToHexString(bytes.get(3)));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * 其他秘钥加密转LMK加密
     */
    
    public void otherEncKeyToLMLEncKey() {
        try{
            ArrayList<byte[]> bytes = api.otherEncKeyToLMLEncKey(0, 7, 6,
                    Forms.hexStringToByteArray("00000000000000000000000000000000"),
                    Forms.hexStringToByteArray("00000000000000000000000000000000"),
                    Forms.hexStringToByteArray("71802E75BD4D99E90996A9B9DA6616E9"),
                    0,  Forms.hexStringToByteArray("B36847D6E86EAB69E4EEB65558A2626C"),
                    new byte[0], new byte[0], 5, -1,-1, new byte[0], 0, 7,
                    Forms.hexStringToByte("994056800038295C09C7F45977D291AA"));
            System.out.println("=============保护秘钥为对称秘钥============");
            for (int i = 0; i < bytes.size(); i++) {
                System.out.println(Forms.byteToHexString(bytes.get(i)));
            }
            ArrayList<byte[]> bytes1 = api.otherEncKeyToLMLEncKey(1, -1, -1,
                    new byte[0], new byte[0], new byte[0],
                    9,  new byte[0], new byte[0], new byte[0], 3,
                    1, 1, new byte[0], 0, 7,
                    Forms.hexStringToByte("B4443F2F298242D239070B7FD6F7068E38068B1F4EB006F70816D1E04AE63BB86BC113604DCD379EB22F1B86185D27501014AFA14F8E425EC5AB9C6B60DA823B3E93FCB3E89AB4D10FA32B3FB05901E9F4D5497BB80FE167F0F268D7255CC57774F4E7E5E6574E582F0F27D2EC81199322CE9A85B3019290293B30ADE796BBD12C4F6EEDDD62E278322D66F9CACD1036EC2D8067F18FFD2B20E793EA201D86E58540F9C436C19E1A7A75BC2048B2B1709765BE56F87C261ECD9CCBACD61BA61909CED2608CA83F91837E0300F387CF5A115A72293ACF290CAE4482CCA9F756548493951C5A6CB5430DAE8F02B2875D05C986D06E36C6BA22EFE6B62591E77F37"));

            System.out.println("=============保护秘钥为RSA秘钥============");
            for (int i = 0; i < bytes1.size(); i++) {
                System.out.println(Forms.byteToHexString(bytes1.get(i)));
            }
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * 其他秘钥加密转LMK加密
     */
    
    public void otherEncKeyToLMLEncKeyEx() {
        try{
            ArrayList<byte[]> bytes = api.otherEncKeyToLMLEncKeyEx(0, 7, 0,
                    null,
                    null,
                    null,
                    0,  sm4Key,
                    new byte[0], new byte[0], 5, -1,-1, new byte[0], 21, -1,
                    Forms.hexStringToByte
                    Forms.hexStringToByteArray("00000000000000000000000000000000"),
                    Forms.hexStringToByte("8C9ACD10F27C1CC2F8B8AAAF2A23E316"));
            System.out.println("=============保护秘钥为对称秘钥=====被保护密钥为RSA=======");
            for (int i = 0; i < bytes.size(); i++) {
                System.out.println(Forms.byteToHexString(bytes.get(i)));
            }
            ArrayList<byte[]> bytesECC = api.otherEncKeyToLMLEncKeyEx(0, 7, 0,
                    null,
                    null,
                    null,
                    0,  sm4Key,
                    new byte[0], new byte[0], 4, -1,-1, new byte[0], 22, 928,
                    Forms.hexStringToByte("E28BFA801D7BE5896FE49B07FA08246EE960FB0E3AB0956B245A049451638A2D9A71413DB0EB096F126177A5187D9CE2"),
                    Forms.hexStringToByteArray("00000000000000000000000000000000"),
                    Forms.hexStringToByte("C9306C9F7FB514DD5C2CB5DD6BC86ADB"));
            System.out.println("=============保护秘钥为对称秘钥=====被保护密钥为ECC=======");
            for (int i = 0; i < bytesECC.size(); i++) {
                System.out.println(Forms.byteToHexString(bytes.get(i)));
            }
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * LMK加密转其他密钥加密
     */
    
    public void LMKtoOther() {
        try {
            System.out.println("=============LMK加密转SM2加密======外部密钥========");
            /**
             * sm4
             * LMK加密的对称秘钥：B36847D6E86EAB69E4EEB65558A2626C
             * 对称秘钥的校验值：713CA557C1FE2AAB
             */
            ArrayList<byte[]> ECCEncKey = api.LMKToOther(2, 7, TACryptConst.ENC_MODE_ECB, null,
                    null, 0,
                    0, Forms.hexStringToByteArray("767D8AC23342F8A7296C23B34B7465A07CA216C683D4193A4FC03F16FE47724A33BD28DC08DC06E78DA3BB28936D9F0953557BB857B823B3AEE73C8F56E05919"), null,
                    null, -1, -1, -1, null, 0, 1, 0,
                    0, 3, Forms.hexStringToByte("7C00BBC63E68F5CD35B0F72F9EA33ABC"), null);
            for (int i = 0; i < ECCEncKey.size(); i++) {
                System.out.println(Forms.byteToHexString(ECCEncKey.get(i)));
            }
            System.out.println("=============LMK加密转对称密钥加密=====外部密钥=========");
            ArrayList<byte[]> symmKeyProData = api.LMKToOther(0, 7, TACryptConst.ENC_MODE_ECB, null, null,
                    0, -1, Forms.hexStringToByte("B36847D6E86EAB69E4EEB65558A2626C"),
                    null, null, 5, -1, -1, null, 0, 1,
                    -1, 0, 7, Forms.hexStringToByte("45FD10D8C3DF72D34421B42FB5BBEE7E"), null);
            for (int i = 0; i < symmKeyProData.size(); i++) {
                System.out.println(Forms.byteToHexString(symmKeyProData.get(i)));
            }
            System.out.println("--------------LMK加密转对称密钥加密-----内部索引--------");
            ArrayList<byte[]> symmKeyProDataIndex = api.LMKToOther(0, 7, TACryptConst.ENC_MODE_ECB, null, null,
                    0, -1, Forms.hexStringToByte("B36847D6E86EAB69E4EEB65558A2626C"),
                    null, null, 5, -1, -1, null, 0, 0,
                    -1, 25, 7, null, null);
            for (int i = 0; i < symmKeyProDataIndex.size(); i++) {
                System.out.println(Forms.byteToHexString(symmKeyProDataIndex.get(i)));
            }
            System.out.println("=============LMK加密转RSA密钥加密==============");
            ArrayList<byte[]> RSAProKey = api.LMKToOther(1, -1, -1, null, null, 0, -1,
                    Forms.hexStringToByte("3081B80281B0C7F877A40D47AE7CC4F5AF9143B31F5D2A0D4CBD43BE55DE3ABA4170F48913CB76230596E47B5DA7270CFB0E57D63BA3C279CD3EB0CE7B5E896F731BD8ABFB8921E6B6E97A64C9A58F0A4D08678260D1B3C642E8045023B5B2D952FFFDE7DEBF8D22F00DFB0DC2464CFEC83172603A13F2F6E25750DAA94859CDDD3606D019FDCE3C3462D6918E770446932BDC1F235F2A87AD586410DDF6545A7FECECE1D832306127B49F8F89AB428324F674767EDF0203010001"),
                    null, null, 3, -1, -1, null, 0, 1,
                    -1, 0, 7, Forms.hexStringToByte("45FD10D8C3DF72D34421B42FB5BBEE7E"), null);

            for (int i = 0; i < RSAProKey.size(); i++) {
                System.out.println(Forms.byteToHexString(RSAProKey.get(i)));
            }
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }


    
    public void enveopEncAndDec() {
        try{
            byte[] bytes = api.enveopEnc(sm2Key, "1111111111111111".getBytes());
            System.out.println("数字信封封装结果：" + Forms.byteToHexString(bytes));
            byte[] bytes1 = api.enveopDec(sm2PriKey, bytes);
            System.out.println("数字信封拆封结果：" + new String(bytes1));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻塞处理");
        }
    }

    /**
     * 对称密钥转加密 & 非对称转加密
     */
    
    public void symmetryConversionEncryption() {
        try {
            ArrayList<byte[]> bytes = api.conversionEncryption(0, TACryptConst.KEY_ALG_SM4,
                    Forms.hexStringToByteArray("CBDCCE33784FA93FBE0B3BAA46CF3557"),
                    Forms.hexStringToByteArray("F6684895E1ABC2AD"),
                    0, TACryptConst.KEY_ALG_SM4,
                    Forms.hexStringToByteArray("6BFC84C39CB9277C06C7FA2A30C912A1"), b,
                    Forms.hexStringToByteArray("AB75C62580061710B39327B45881F589"), TACryptConst.ENC_MODE_GCM,
                    b, new byte[0], Forms.hexStringToByteArray("4A501743FA4B906244A0A8705192C1C8"), 0,
                    TACryptConst.KEY_ALG_SM4,
                    Forms.hexStringToByteArray("CBDCCE33784FA93FBE0B3BAA46CF3557"),
                    Forms.hexStringToByteArray("F6684895E1ABC2AD"), b, TACryptConst.ENC_MODE_GCM, b, new byte[0]);
            for (int i = 0; i < bytes.size(); i++) {
                System.out.println("第" + i + "个===" + Forms.byteToHexString(bytes.get(i)));
            }
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * 对称密钥转加密 & 非对称转加密
     */
    
    public void symmetryConversionEncryption1() {
        try{
            ArrayList<byte[]> bytes = api.conversionEncryption(0, TACryptConst.KEY_ALG_SM4, sm4Key, sm4CV,
                    TACryptConst.KEY_TYPE_ECC_OR_SM2,
                    TACryptConst.KEY_ALG_SM4,
                    Forms.hexStringToByteArray("83E260209C09CC3FEFDEFE7F4B620157A3F25E0B3098A4677DAF3A8E9DC327A17AEB2C8919E1E4CF"), b,
                    Forms.hexStringToByteArray("E60EFC48823B17C51F68D0EB622298FB"),
                    TACryptConst.ENC_MODE_GCM, b, new byte[16],
                    Forms.hexStringToByteArray("B200ED220D49D855EC4438649057EB02"),
                    0,
                    TACryptConst.KEY_ALG_SM4, sm4Key, sm4CV, b, TACryptConst.ENC_MODE_GCM, b, new byte[16]);
            for (int i = 0; i < bytes.size(); i++) {
                System.out.println("第" + i + "个===" + Forms.byteToHexString(bytes.get(i)));
            }
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻塞处理");
        }
    }


    /**
     * 对称算法 CMK 保护导入非对称CMK
     */
    
    public void importCMKByCMK() {
        try{
            ArrayList<byte[]> bytes = api.importCMKByCMK("zjl".getBytes(), 7,
                    6,  //保护CMK DomainKey 加密 CMK 使用算法模式标识
                    new byte[16],     //ECB 模式解密时使用的 IV 数据
                    new byte[16],      //GCM 模式解密时的认证数据
                    Forms.hexStringToByteArray("9BBBACA55806E706BA6D75C913C6A394"), //GCM 模式解密时的 MAC 值
                    Forms.hexStringToByteArray("58F87A70E6C2F719DB2D060D710304D5"),//秘钥密文
                    Forms.hexStringToByteArray("8ECAFDB0D5507AF518C2202424A77C53"),  //GCM tags
                    6, //保护密钥加密模式
                    new byte[16],//保护密钥IV
                    new byte[16], //认证数据AAD
                    Forms.hexStringToByteArray("3F244063B3A56759613DF3C980E74547"), //tags
                    5,//保护密钥加密填充方式
                    12, //会话密钥类型
                    7,  //会话CMK 非对称密钥的算法标识
                    Forms.hexStringToByteArray("016D72FC3E2D27893DF5910CD4435DADCFB9D5246C4ED13F25ECB7CA8A7A4E8F0C0FEB5395C040F550395FBC1D914588F565747D1AC38C44D0DF550FDD755938"),//会话私钥密文数据
                    "zjl2".getBytes(),//会话DomainKey 标签
                    6,//会话DomainKey 加密 CMK 使用算法模式标识
                    new byte[16],//会话加密上下文(非 ECB 模式加密时使用的 IV 数据)
                    new byte[16]//会话认证上下文数据（GCM 模式加密时的认证数据）
            );
            System.out.println("使用保护密钥加密密钥密文:" + Forms.byteToHexString(bytes.get(0)));
            System.out.println("MAC:" + Forms.byteToHexString(bytes.get(1)));
            System.out.println("tags:" + Forms.byteToHexString(bytes.get(2)));
            System.out.println("密钥校验值:" + Forms.byteToHexString(bytes.get(3)));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    
    public void testData() {
        try{
            //产生对称密钥,保护密钥保护输出
            ArrayList<byte[]> bytes = api.proGenSymmKey(25,
                    -1, null, TACryptConst.KEY_ALG_SM4, b,
                    TACryptConst.ENC_MODE_GCM,b, b);
            System.out.println("LMK加密的会话密钥密文：" + Forms.byteToHexString(bytes.get(0)));
            System.out.println("会话密钥的校验值：" + Forms.byteToHexString(bytes.get(1)));
            System.out.println("保护密钥加密的会话密钥密文：" + Forms.byteToHexString(bytes.get(2)));
            System.out.println("会话密钥的MAC值：" + Forms.byteToHexString(bytes.get(3)));
            System.out.println("tags：" + Forms.byteToHexString(bytes.get(4)));
            System.out.println("-------------------------------------------------");
            //对称密钥（受保护密钥保护）加密数据
            ArrayList<byte[]> bytes1 = api.proKeyEncData(25, -1, null,
                    bytes.get(2),
                    b, bytes.get(3), TACryptConst.ENC_MODE_GCM,
                    b, b, bytes.get(4),
                    TACryptConst.KEY_ALG_SM4, 0, 0,
                    new byte[16], TACryptConst.KEY_ALG_SM4, TACryptConst.ENC_MODE_GCM,
                    Forms.hexStringToByteArray("0000000000000000000000000000000000000000000000000000000000000000E43101353F49C7164DAE6C691FC25CD494D9A28D0F6C4B51F3BB9DC85ADDBE09"), new byte[16], new byte[16]);
            System.out.println("密文： " + Forms.byteToHexString(bytes1.get(0)));
            System.out.println("tag： " + Forms.byteToHexString(bytes1.get(1)));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻塞处理");
        }
    }

    
    public void agreementKey() {
        try {
        byte[] bytes1 = api.agreementKey(0x0007, 3, 9, Forms.hexStringToByte("3059301306072A8648CE3D020106082A811CCF5501822D03420004AC3DC24CE9883F26278E97A04D5409AA2A94D57FCE84E7630F4E46CFBED036A6B89791DF9A3DF50D67073CF246FC3406337B50E987F2AC3943D2FF5C7ECAD197"));
        System.out.println("0x0007协商结果：" + Forms.byteToHexString(bytes1));
        byte[] bytes2 = api.agreementKey(0x0007, 3, Forms.hexStringToByte("E59842CEEC68775E6AD78C7276AD2ADE0E27405E8B60FE02F7DF23E08F7F6B8D"), Forms.hexStringToByte("3059301306072A8648CE3D020106082A811CCF5501822D034200040EF69FB0C3739C3FDC16499AB96985EAD5CBEB4178A985A8FC10145979C315A5519C50B972EB19EA77A6AB74F345688B8458F1015885FCE435A4E3679DE0E34F"));
        System.out.println("0x0007外部私钥明文协商结果：" + Forms.byteToHexString(bytes2));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * 根据秘钥索引获取对称秘钥详情
     */
    
    public void getKeyInfo() {
        System.out.println("根据索引获取密钥信息");
        try {
            String[] keyInfo = api.getKeyInfo(25);
            for (String str :
                    keyInfo) {
                System.out.println(str);
            }
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    
    public void generateAndSaveKey() {
        System.out.println("产生并保存密钥");
        try {
            ArrayList<byte[]> symmKey = api.generateSymmKey(7, 32);
            for (int i = 0; i < symmKey.size(); i++) {
                System.out.println(Forms.byteToHexString(symmKey.get(i)));
            }
//            boolean b = api.generateRSAKey(2048, 65537, 13);
//            System.out.println("产生并保存RSA签名密钥对" + (b ? "成功" : "失败"));
            boolean b = api.generateRSAKey(2048, 65537, 100, 2);
            System.out.println("产生并保存RSA密钥对" + (b ? "成功" : "失败"));
            boolean b1 = api.generateECCKey(0x019F, 8);
            System.out.println("产生并保存ECC密钥对" + (b1 ? "成功" : "失败"));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    
    public  void getPublic() {
        try {
            ArrayList<byte[]> list = api.getECCorSM2PublicKey(1, 0);
            System.out.println("SM2公钥：" + Forms.byteToHexString(list.get(0)));
            System.out.println("SM2标签：" + new String(list.get(1)));
            ArrayList<byte[]> list1 = api.getECCorSM2PublicKey(4, 0);
            System.out.println("ECC公钥：" + Forms.byteToHexString(list1.get(0)));
            System.out.println("ECC标签：" + new String(list1.get(1)));

            ArrayList<byte[]> list2 = api.getRSAPublicKey(1, 0);
            System.out.println("RSA公钥：" + Forms.byteToHexString(list2.get(0)));
            System.out.println("RSA标签：" + new String(list2.get(1)));
        } catch (TAException | IOException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    
    public void eciesEncAndDec() {
        try {
            byte[] Plaintext = Forms.hexStringToByte("13C85604A7FEB6F61BD42F4351C6B4F8919432608171D03880CBEC0109A479687D6FFB1526FAF76B40E5C570708E054CCF8FDE3C936E26375A353CC11E09159385838BBDB482B619625DD277CDB81AA766F67C01708045E9B4CD2A8D65A74E50204057BFF893B182799C2D835D2ADBD0B3FEE41E92867557AD74DE2136BCEE29C6160B73FAD699CC910368D38EB8FBCFAF02A970DF4382CCC77A350E8121238C11F5E95C6947D0462896064EA31EDEC9248518EEB14FB48D2F7F191F1F9E14FC4B426BF8A68B30B27CE6682A77020C9FBEFB75475185191FDEB59879291E02CB519CCABBCB674D1D1EBC20C05F2334254B31FDAB1248936CE19C897F0426E400614E4F770D713F42662E02630934B7900FE45ABAEB42C673E16ABCAAF28DC48ED8930AE0CDF5BD3FEB6B71429392799FBD127B63AC5D8DE43A27C53143EF5C84E1CAA7B8CD0F74B613C046B3BE54744ADD077211F85DEC593B93CB86D7FE3080581D64AADB768DE0876CACA688823839C2C9DC45C82733BD9EF587CA01A0E896F062EE7F7D3E25F6A0C39093039B50FD479DAAC8508C01ED0D01F7BD3E56099DFA02DAB2521878032B6E2BA22BA0BDEC9DAFAB7DCA08D9CB64771D7FE4552247985FEDAC8DD2C3F2B78403BD2A1B3AA6697F24E710742140AB785C6D2876BAB714EE0981A932A18D2875272AA5E5D3786DB4615439843A0E3B3935DFB73C40EA63098CF5EE3FB8C530D68467878A3457FB8B6467D90B70E7F6FC078C7B0580A7FABB447A355D7682A967C164BD0399C07FBA85977BA0E4A53C3D713B4B8FAEFB971CD0EC4467AB2365DCC8B29D5A0F2CEE330417BED5A5C995B27D20A377A5486008999DFFB0BE4BA6903AD0EE0808F01A8A04ABDAC874DB8376391BCBA84BF101431367D21A911F9B3CD1657836930F02BE413AF4B3B26AF1486C75ECF24512C427DF05EF154C88E9998FC3E6BCCFD4B1F6FD10688DCF075BC20B56E67735F7CD5ACB547ED61D4C30CC014A4360D228E2CF80179A9AE835B1779FEF23420A1B28EDF7E989FE5F22AD3DBE5008E0EB135456FF53D059EA8755B79B0DE6A021DA7EAAA4FE727CA4BFBF26F39F65F190EBF595ACC36D85B95F59A115082F6CB2E8221B3403E90430313DBE5062DE618A400AEC80C9F22206EDD48F3842C05B2FE94D84C77ACEF2EB0A9AE0AD741589320408E0CA201C45AC993F9A811BCA92C86E7AF041A8642A633B2EC0E5F14875AE8BCD585B0FBC2D45EAF23E57D418F049CD187310C2765994525A9039B9D05918C079A6F7436B971DCD61B30D89EE19D2A60BA1EFD15F9CE15B40EF00D81FEA3E2D0D49D1BD11B8859550DBD935F86A2E8CFBEAADDAAD287F708DA7D5FD3BCD6935A0F4FF0F6ABCC479256A9B03470B537B5CF65BF84F2663EC0F439E2B08AA3D2000E7AEE5BBB47C60D8D1C5009EEB");
            byte[] data8192 = Forms.hexStringToByte
            ArrayList<byte[]> endData = api.eciesEnc(0X019F, 2, 1, 99, 0, 0,
                    Forms.hexStringToByte("6505F439B633D7D0D129D13DC332F83E3F3D2C13AA4A3973AA1D9C239194EE8C7BE619EDAF402BA7DF66918AB402A53F5E88DE7DACF38787342F3D0DFAB277A1"),
                    null, 0, Forms.hexStringToByte("789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF"),
                    null,
                    1, 8, Forms.hexStringToByte("4ED5301E2613A1626B1A197C5C950C898DF4E68F7ABCE16688388AB32ADF8654C13F5A3D308E41A284BF8F5A9C48BEB083098B"),
                    0X10, Plaintext);
            System.out.println("========曲线0X019F--KDF2--产生MAC--数据长度2044");
            System.out.println("Ephemeral 公钥 R : " + Forms.byteToHexString(endData.get(0)));
            System.out.println("密文 C : " + Forms.byteToHexString(endData.get(1)));
            System.out.println("D(HMAC) : " + Forms.byteToHexString(endData.get(2)));
            byte[] decData = api.eciesDec(0X019F, 2, 1, 99, 0, 0,
                    endData.get(0),
                    0, 1, Forms.hexStringToByte("B4A6843469797AA8176CA9E2C993C231C1D6B23258D323DDC14BCDC9D0A3F3C3"),
                    null, 0, Forms.hexStringToByte("789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF123456789ABCDEF"),
                    1, 8, Forms.hexStringToByte("4ED5301E2613A1626B1A197C5C950C898DF4E68F7ABCE16688388AB32ADF8654C13F5A3D308E41A284BF8F5A9C48BEB083098B"),
                    endData.get(2),
                    0x10, endData.get(1));
            System.out.println("解密明文和原始密文对比结果：" + Arrays.equals(decData, Plaintext));

            ArrayList<byte[]> endData1 = api.eciesEnc(0X02CA, 2, 6, 99, 0, 0,
                    Forms.hexStringToByte("F54E8973A95336AD942B473E4EE4116830989372B2A2B5F1D7F7736D90AF2253110A064AF4A962D77178F97BCC682F8C023A981B5C6E4BBB85F3C1E2D546C1F9"),
                    null, 0, Forms.hexStringToByte("4552247985FEDAC8DD2C3F2B78403BD2A1B3AA6697F24E710742140AB785C6D2876BAB714EE0981A932A18D2875272AA5E5D3786DB4615439843A0E3B3935DFB73C40EA63098CF5EE3FB8C530D68467878A3457FB8B70E7F6FC078C7B0580A7FABB447A355D7682A967C164BD0399C07FBA85977BA0E4A53C3D713B4B8FAEFB9"),
                    null,
                    1, 6, Forms.hexStringToByte("9AE0AD74C993F9A811BCA92C86E7AF041A8642A633B2EC0E5F14875AE8BCD585B0FBC2D45EAF23E57D418F049CD187310C2765994525A9039B9D05918C079A6F7436B971DCD61B30D89EE19D2A60BA1EFD15F9CE15B40EF00D81FEA3E2D0D49D1BD11B8859550DBD935F86A2E8CFBEAADDAAD287F708DA7D5FD3BCD6935A0F4F"),
                    1, data8192);
            System.out.println("========曲线0x02CA--KDF2--产生MAC--数据长度8192");
            System.out.println("Ephemeral 公钥 R : " + Forms.byteToHexString(endData1.get(0)));
            System.out.println("密文 C : " + Forms.byteToHexString(endData1.get(1)));
            System.out.println("D(HMAC) : " + Forms.byteToHexString(endData1.get(2)));
            byte[] decData1 = api.eciesDec(0X02CA, 2, 6, 99, 0, 0,
                    endData1.get(0),
                    0, 1, Forms.hexStringToByte("D3CFA7551016F8AE6EE2DEA4879738263A079057ECC1095E5E4B10064370323D"),
                    null, 0, Forms.hexStringToByte("4552247985FEDAC8DD2C3F2B78403BD2A1B3AA6697F24E710742140AB785C6D2876BAB714EE0981A932A18D2875272AA5E5D3786DB4615439843A0E3B3935DFB73C40EA63098CF5EE3FB8C530D68467878A3457FB8B70E7F6FC078C7B0580A7FABB447A355D7682A967C164BD0399C07FBA85977BA0E4A53C3D713B4B8FAEFB9"),
                    1, 6, Forms.hexStringToByte("9AE0AD74C993F9A811BCA92C86E7AF041A8642A633B2EC0E5F14875AE8BCD585B0FBC2D45EAF23E57D418F049CD187310C2765994525A9039B9D05918C079A6F7436B971DCD61B30D89EE19D2A60BA1EFD15F9CE15B40EF00D81FEA3E2D0D49D1BD11B8859550DBD935F86A2E8CFBEAADDAAD287F708DA7D5FD3BCD6935A0F4F"),
                    endData1.get(2),
                    0x10, endData1.get(1));
            System.out.println("解密明文和原始密文对比结果：" + Arrays.equals(decData1, data8192));

            ArrayList<byte[]> endData2 = api.eciesEnc(0X02CA, 0, 1, 3, 1, 0,
                    Forms.hexStringToByte("F54E8973A95336AD942B473E4EE4116830989372B2A2B5F1D7F7736D90AF2253110A064AF4A962D77178F97BCC682F8C023A981B5C6E4BBB85F3C1E2D546C1F9"),
                    Forms.hexStringToByte("1234567890ABCDEFFEDCBA9876543210"),
                    0, Forms.hexStringToByte("4552247985FEDAC8DD2C3F2B78403BD2A1B3AA6697F24E710742140AB785C6D2876BAB714EE0981A932A18D2875272AA5E5D3786DB4615439843A0E3B3935DFB73C40EA63098CF5EE3FB8C530D68467878A3457FB8B70E7F6FC078C7B0580A7FABB447A355D7682A967C164BD0399C07FBA85977BA0E4A53C3D713B4B8FAEFB9"),
                    null,
                    0, 6, Forms.hexStringToByte("9AE0AD74C993F9A811BCA92C86E7AF041A8642A633B2EC0E5F14875AE8BCD585B0FBC2D45EAF23E57D418F049CD187310C2765994525A9039B9D05918C079A6F7436B971DCD61B30D89EE19D2A60BA1EFD15F9CE15B40EF00D81FEA3E2D0D49D1BD11B8859550DBD935F86A2E8CFBEAADDAAD287F708DA7D5FD3BCD6935A0F4F"),
                    0x11, data8192);
            System.out.println("========曲线0x02CA--KDF0--不产生MAC--数据长度8192--CBC");
            System.out.println("Ephemeral 公钥 R : " + Forms.byteToHexString(endData2.get(0)));
            System.out.println("密文 C : " + Forms.byteToHexString(endData2.get(1)));
            byte[] decData2 = api.eciesDec(0X02CA, 0, 1, 3, 1, 0,
                    endData2.get(0),
                    0, 1, Forms.hexStringToByte("D3CFA7551016F8AE6EE2DEA4879738263A079057ECC1095E5E4B10064370323D"),
                    Forms.hexStringToByte("1234567890ABCDEFFEDCBA9876543210"),
                    0, Forms.hexStringToByte("4552247985FEDAC8DD2C3F2B78403BD2A1B3AA6697F24E710742140AB785C6D2876BAB714EE0981A932A18D2875272AA5E5D3786DB4615439843A0E3B3935DFB73C40EA63098CF5EE3FB8C530D68467878A3457FB8B70E7F6FC078C7B0580A7FABB447A355D7682A967C164BD0399C07FBA85977BA0E4A53C3D713B4B8FAEFB9"),
                    0, 6, Forms.hexStringToByte("9AE0AD74C993F9A811BCA92C86E7AF041A8642A633B2EC0E5F14875AE8BCD585B0FBC2D45EAF23E57D418F049CD187310C2765994525A9039B9D05918C079A6F7436B971DCD61B30D89EE19D2A60BA1EFD15F9CE15B40EF00D81FEA3E2D0D49D1BD11B8859550DBD935F86A2E8CFBEAADDAAD287F708DA7D5FD3BCD6935A0F4F"),
                    null,
                    0x11, endData2.get(1));
            System.out.println("解密明文和原始密文对比结果：" + Arrays.equals(decData2, data8192));

            ArrayList<byte[]> endData3 = api.eciesEnc(0X039B, 2, 6, 1, 1, 0,
                    Forms.hexStringToByte("1D33FAFBE41189402918CD5D41635A79B43054148500AB9F72C54E2DEC9ADD38DEFC9138AF1006FF3E63210A28F7B2A1"),
                    Forms.hexStringToByte("1234567890ABCDEF"),
                    0, null,
                    null,
                    1, 8, null,
                    0x1, Forms.hexStringToByte("00"));
            System.out.println("========曲线0x039B--KDF2--产生MAC--数据长度1--CBC");
            System.out.println("Ephemeral 公钥 R : " + Forms.byteToHexString(endData3.get(0)));
            System.out.println("密文 C : " + Forms.byteToHexString(endData3.get(1)));
            System.out.println("D(HMAC) : " + Forms.byteToHexString(endData3.get(2)));
            byte[] decData3 = api.eciesDec(0X039B, 2, 6, 1, 1, 0,
                    endData3.get(0),
                    0, 1, Forms.hexStringToByte("6FB8BF301667CC4DF4D2AB71583CC671CF467394AB7063D7"),
                    Forms.hexStringToByte("1234567890ABCDEF"),
                    0, null,
                    1, 8, null,
                    endData3.get(2),
                    0x1, endData3.get(1));
            System.out.println("解密明文和原始密文对比结果：" + Arrays.equals(decData3, Forms.hexStringToByte("00")));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * JCE联调
     */
    
    public void testCCMJCE() {
        byte[] inData = Forms.hexStringToByte("1298f530da62514aaeb1d8c4416f5176d4f75cbbcb0f4a3bf26f58a7cb141882363335d87d9479997cfee1ff273c8a8fbd5030eda1b6d38548414c2261c0481bdfa2fd84617abb7f3aae2e33982ae0d9f61cacc4381ed55842d96b8851031828a9eace56d3a5e1b97522c7d9831ff9a40e9ffe9d705badccddf685ab4d51cb5a9c1a3d0b4800e4a9d02d6074b9b2bbfb82c7b8e63f632757423447501ce1af5ab480132661b5ebe144643caba4514f578c2d8f92451b1aa051ea70578e187748f253abf492aa140e070d8ac87c1f86b674299c279740ed08f8654ce1d73a6459250d5e856491ee0f1d37450ae08e167e87bc11b12e5927c9b3f10b1f0b568b07b34a02495f89b4cc7ff02301cc22d3fa10e463efe490ef00c2ffe44a77f6c881e0223e06dc6bbd00b26cc3d2af836235b9656baf3e4d1454df30c9ec34bfaa29122a590bd7d2cc49ac59c5c59a60d3f5cbe38c38ad41a9bfffb1a4c97d92df1411f723db89877ffc585e87376188ad0e5ef12f22e05e0c00587ae1e3708bff2a32c732233cd7344fb443164d7b59f363d1d075f2f8d7e7134eb1785143ab03ee4ffc0970d6a170b3e309e2441df8491090aec5affcfd0d6dfd54ae791bd361f82100116bc3606ca7f11e5d492cf3714cdb1d8cd0685607094ffe8f5058d0c932c68df91701c648d16ed7ce67284b79d813261597fa49776cd591386a41f40844485b0283c1b429ab857e7e9162a92c8ff6d1738594fbfe60c5c148bc6fa270e4d759704fc34ba9df56d0d8dc7964f21be4739ef5c70677ee3234087652321ebee5efcb99757d42d2f0443ae5092ed696da987e23089437504bc810e8f7a88417737ad8745d89f1d88d0e6f71d681b1f4cb0121e4c1ec4d09396807c9909b0c5eb25c5a7c62f5314972821dad5193a660194b369026e29e5e9a2f0bca32b82f88ace2b4a9591b37c18318d18d99ae02d8643e3ea15d7b7b557a46e7a45b199a6eb5d82feff0a402d9567cf9951b865e8c2a8ab48e0a36d409ed2d437972eb24ac32d1ae8dbaa438118fac9ef7d522a6be026afcb08acd1e4eef7fe5b93394daf67c25504ebb516229c7933d077ecad1bddcee8f22a33cae7b7fcef4da50a258521f27d29cb2e3f13a946c804dd3778bf8fbdd58a0d81ed069450e26f1560d5d4ce681c7f7369be3126ddbde955c775ac52195079824aaa1c2f880a2624cff4c85ecbe6b46d56b08abba34d79d06735de30b7515da051bcd4cdc540681202ba50a02dd269c5a3e3606bcbbfde54963ea2ba9c525af7a4dc45fe982e6a42d223bb8e20b60a6ccd0f4d0e8162a70608125aff5c1c6179ee9374be08cc1d75bf13d76881a783330e26c738c57656bded6e1ba6d21a212b96cc9bd8a884edbc152e51912ed337571f9fcf1d0d034885266b54eebe1143e6f3dab9f8d0e4836076f089463204863b7aa03c2882beab28aa867c7a954404f33c392d92bcf8c148ba883a4619007292047af1648c7ae91d1c6680db9a3ae5eddbbbaf9906f33dd485bbde8e8514080a4a69b1a20dfb504697738ed6f8b278f0dc054f9e97f633702dfbe9085d75efe4cc5ad6880c87e7034d87965521cb504ea17656452ee1c45dcaa2384a1fba480caa6c68f0522f5dfa36c48b4b29df80b39086443375831e0d65a3fcd1023d3262f153015bc0036cc88001ef35c1fedb083153ad49407e503046ca14ce38b270837ad523ee6ec7d5793d72bf584a671982b5e55c2733c8ce152292c370ce7814b52e15df0a1827860bf10739b1e680e2f974198c4e107286220ef42007b6a9a55b86d55b547a1338d460b691b955ead3c5403fea5f4abc693a424b93e8fb4f8149d4adbca2a9be085b40e80967707bca1879667ccfe8716483d0b85a6191b02d76a28c05f51f00ecfca987d6ebfcc6aeb7568ae2cf012e42c590c66645b3c07fac1eb217c8c5c3cbb636b95fccf53ce928c76c883b4ded797d1a7f4bdd33563be9fb740d6d60bc4819c43243ebee3c5eb6b99d32251f9f703ec455c9e0bcfd83883162164c95cdb97082cf3bc07d9a39d77a63ac3d6391dd55d8b85b1951d6f8a9c4fb88aead1f0af904ae1a538552c57afc33b146fab9e3a7578edd1f3d046057f043b13d56f43faf7664158e4d6c18b0a6c44cfc7dbb10fa6cdefa199fdc753e80d09167ae2ad41936c004592172b2708142821d704207ba61213e31bc1ac79239ec97c54ba140013c99f94a954d415221588346f36fc32d62cb79917d984a264fc597936eda62ceaac6e55fd4a742cb454b0fb3f4a2618f0d175f1632294d5e2dd02d5c5b47bde322351e9c4f3904990f24e54db003cbee6028adf491523fd4deb522f66fc6f6ed5c5512bc2fcb1eb8b3553b9976440e95a4e00870e5c5f07e7b5f232019ea45f718e0160987ae61ad45c94a6af08c9006d04f4149aa61d7fa0d61d2bc52455624c74fe7b8b3f434bbd7a5d53e76dfbf40c0b38a60fee2dab1bbbfb13445a427f4411f8799b5f3150f7f987f1e04a3c5ecefe2486641abde91e852980b1364e14e23006db43032acd5eef155b8e9ee3f9e17017f708713bcbe759898820ca368c9fb942df78ecc3823574d2dcd974aac8b7178c1c865b3b2bfec860095171462a02a41537f956fcbd45660a85d5a1137ca8a3af35b696800cee57cacb35290cd51410cdf53147e9b96ae1cfc4278a51025dd7fe740878fabce174517b354cde5c54375b9f923358f1f27454db673d1af18bd57a768af091bca1a8d79cc9eae8632a32f96868c3d988869649524ccb9fa15adf47fe2767a8f0f4f651a2ca5641b75d3a8bf3abc294b4fbd6baba1ee396babe613b008c8ca035c637eb3d1a6dc46bb1c18c5ecc143e1cefc908afae5857dfbd7296dcd5e05df304892c37b8fc4977cb407eb8b36fd30868798a2f69fa3d9f50715f8bddee6f2efa15cef2ac495a4ceaf9f117b7c4a2705d08dc5a66ce57613661e4b3d12582fd3e6c1d1a84294c2dc8043214e5ca4c6af1addb19367b69bb63021f1c80ac141c0de81fdbf4a992511c637bc14e14b78cfca994fe4cbe051acb61341eb82adee2fe99e599d4bfbd2ae5458c35f36c8aadd120895de3b7569790c8293f5ffcfd4839807a5bff24e686dc80478b437f0f0aa642a84c67bb0f2fb9ba6d2cd43c83a0cad49130186d99ee1cef6a43e5358ce16ea5504ca6139912df8b60f4d82c695587dc9a484d8ee2861e68903e33499a5c427664fa0cbe9016dd572647a15bf36b264acaa3eeb1471d6e1783966e741c8104da2908d7851fdbc4a8ba0b3a5109a374e76a6d4a3ed33265a9b9cd9cd8fa496e7534eed02a7fa8136e48bf9124ba3be0ea2863258794a9aaf1cf3ceee7dfe2f2bc9e282331d99d8c9a2e35b13c0be6769e88f5f3e471fc229b3fa6c3a44473cc5937a449f1288cebbf1572728d4f3992185b466bb1d429cb776b6a2ccbdfd832f73c739d65355015753bdb8d6940eda75b452954be4950ef44fa1e470e8cec809e25ae613193873890bebcc94831d3efb7448e734161bd5237a10c97696f8f8cc25d7a84737b1dcddefa547911b0f881ffbc064b96e0bf2a3e49469044bda049a409d3d3f9ba28343ed75b771201c03e856a19fceed515b350e5fa269e62db3d0911066163bfc53dcaff40a3e52c82259dc3375ba7bd6c69daf7dd048dfced256d20eb3c677d14d53b2cf56599c068468955cb19d15564a85477647165d9a9cc95dfcbd5b8f6a20e8155ee88563da9d27a9712fb1bb17b440d1f60c923ba57ee4e5ac7c827047bbf19bcb59c74e948556f3d0d7214b3df48434f57a9b72cd277eab9a13558f27703d28148e97b9a82dc049bc2194004005fc0dfb26aa7c30cff8bc606ca66d1c74a324dd37b58a264461366ccefd0c8d35d57128d99f6d7573b3cd85d14ed24431114c92b4446fe4e5e4e7f050db94580fadb813f170b0e625c1cd7f4cb274b0b1693317eca7959cbcabf7bcfdd1cba30e26bb10b9a75d15ba0f4dc29bf6c18ce4572a419ab7cd6781e3894de6628c0832a1926fe7e021c484eded12c6b6fbd9a2b8102d65e263d5c25c3a63399981eab70f8c0afcfb873f7cfb2045e4ca6cac4ebb98e6478cb35155b5adb96ef38e429a5f098a9974ab14513eed9c4bc0716caf91e1c255fab7bff854775f2e79b0db392ad612cd170e720542672969131cf05b74370193bfd525d5792350086b5fff4bc810ae62208e751eb438dc624377eef7eec62aa386968614513c7e9b8c6ff2d969b2fa44baebe8257281611ba3a061d172f521f99de3e7ea95745aa726e6b8b74f7e953f633268c1a163af6114eaab5c481eb38d83942435e90042ee125542a05a0d0d60a3f9affdbc17f94d6981761bf3d71660a64d7d5daebb3486d1ad02e1eedbc1600b62b0baa8c280ce631200b79931ce77b8de28ddb7c21736819621b0df3af5a6fc711d501efb2c592a3ebb7b6c1abd412ccdf2bebc4f3095d20f7c13e8748fc75f1670209cc130f81f5f1b581bed2de45ba37a774b3cc1a113ae34c2c16cb8fb97639e5402240ab4964866455f0463f031081ccd5fdf0acf48d23c17156eb2165c9ea89240f3683d6a7b0db518be7ea910a8abc15206894c30ee04ea2982757906a70339f9e9ee48d0582f163a3a6be67618ee537186a40bd9a72864466aa29a3a85c05393e14536f4d3a2ddf70f61b327500003cfd2c2790d6cb3a44f69c8fc26998b9d9219c193c3b69a16caae64fd4c8f1bbdb48606fc81364a7d89a705b1bddf2b8d1289b569874f16626b960635152118b5bde814fb0f8694264ac19b3ddee165c697980620e4615f6f37907356a1b8a272f89f7828d6562fa5d2ce2bc893d4864cbf5b06c542a5c27d6278fcc94f7cdcef9d46da9b537a04cf55de3a6c7024ffeae108c88dff953de00731d83adda89057c1616e18e0246573e7a6879c0fac97ffee4f9150e2c4ef98f7f3b9d42e525f8816119b02f0710347a0275ddf5ab18459e782626391edc8dde35de352e993648904ea7994c17f93d2b333dfb9189bad0302e5e1b32e51fc781386faab2f7e5dfb731a2baff1b09f2504853f933cd87ddb649d56b505231827701f333d29cc2f5ef1db163583b667ce92f9cacf358b8076ef1d794dd9b959f1574f63de217704fe1756ced70873c2bcff4eccfc2864ea71691164c95433eb991e57990505c791af48ff115860bad47decf071ac98d6baafe76787292e69af7ffaa78e9a04b81c6fe437d2a6426cd070ef6957d1cf83f0a2646e65ce08b3245de5170b5d50b792e8ac241f2f799044ec4c7eaafe6d0c4857499f01707940e6860f792d6f03922e37c441987f352699143f803caa24c38f6df80624168283acd7fd2007bdef84ce186568d0b265d99ca5eac6bfa34c9f2eec37193d4ed209fe3964a876adc0e032933983eaf53ff004e67cfeb40c031ec3cac3e79ffbc63b39e8da6dac015cf57765b88375d0c9045b160943aae807eb85c27e2bfce90cb80daec0487ab5230c4ef4191852c5d0dd23eae91ccad4f22d09345b0fae01c3a8161b4872470cdbaf958af55bad3025fc46e6cb6c6a55e010ba90bc136ffa3814c6aa75c480db8df98365c4fe2a089bdcca3970f0b035dcea7d09cfd7a9f3a77613478a3b4e631ce65d480e25875d4d545efe8881da758cbec866a5c130d1fcfd632d165ac5d9c79e6a979bc9d7bd43e365012bbe63551efc7320d75c1e6a456c7a85263fb270d69a8979cf6d95ac2787e6bc3dcf74d07f6b2ca0888f323e4ffd47e729106fef0458e6e8c186167967e4d6027ffc0e1");
        byte[] sm4Key = Forms.hexStringToByte("6C0BE750CCBC7A0C3F29FC90862E28BF");
        byte[] certificationData = Forms.hexStringToByte("3131313131313131313131");
        byte[] randomNum = Forms.hexStringToByte("3131313131313131313131");
        byte[] data1 = new byte[4096];
        byte[] data2 = new byte[16];
        System.arraycopy(inData,0,data1,0,data1.length);
        System.arraycopy(inData,4096,data2,0,data2.length);

        byte[] result = new byte[4112];

        try {
            ArrayList<byte[]> ccmInitDec = api.CCMInit(2, sm4Key, 1, 3, randomNum,
                    certificationData, 16, inData.length);
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmInitDec.get(0)));

            ArrayList<byte[]> ccmUpdateDec = api.CCMUpdate(ccmInitDec.get(0), 2, data1);
            System.out.println("解密后的数据： " + Forms.byteToHexString(ccmUpdateDec.get(0)));
            System.arraycopy(ccmUpdateDec.get(0), 0, result, 0, ccmUpdateDec.get(0).length);
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmUpdateDec.get(1)));

            ArrayList<byte[]> ccmUpdateDec1 = api.CCMUpdate(ccmUpdateDec.get(1), 2, data2);
            System.out.println("解密后的数据： " + Forms.byteToHexString(ccmUpdateDec1.get(0)));
            System.arraycopy(ccmUpdateDec1.get(0), 0, result, 4096, ccmUpdateDec1.get(0).length);
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmUpdateDec1.get(1)));

            api.CCMFinal(ccmUpdateDec1.get(1), 2, Forms.hexStringToByte("dc21048ca912f5e79d1ac5637cfaa925"));

            System.out.println(Arrays.equals(Forms.hexStringToByte(""), result));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * CCM 多段数据加解密
     */
    
    public void testCCM() {
        byte[] sm4Key = Forms.hexStringToByte("6C0BE750CCBC7A0C3F29FC90862E28BF");
        byte[] sm4KeyCV = Forms.hexStringToByte("704A549C69DA008C");
        byte[] certificationData = "12236523".getBytes();

        try {
            byte[] randomNum = Forms.hexStringToByte(api.genRandom(8));
            System.out.println("随机数： " + Forms.byteToHexString(randomNum));
            //========CCM分段加解密外部密钥=========
            System.out.println("========CCM分段加密=========");
            ArrayList<byte[]> ccmInit = api.CCMInit(1, sm4Key, 2, 7, randomNum,
                    certificationData, 8, 3);
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmInit.get(0)));
            ArrayList<byte[]> ccmUpdate = api.CCMUpdate(ccmInit.get(0), 1, "333".getBytes());
            System.out.println("加密后的数据： " + Forms.byteToHexString(ccmUpdate.get(0)));
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmUpdate.get(1)));
            ArrayList<byte[]> ccmUpdate1 = api.CCMUpdate(ccmUpdate.get(1), 1, "12345678901234567890123456789012345678901234567812345678".getBytes());
            System.out.println("加密后的数据： " + Forms.byteToHexString(ccmUpdate1.get(0)));
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmUpdate1.get(1)));
            byte[] tags = api.CCMFinal(ccmUpdate1.get(1), 1, null);
            System.out.println("Tags： " + Forms.byteToHexString(tags));

            System.out.println("=======CCM分段解密==========");
            ArrayList<byte[]> ccmInitDec = api.CCMInit(2, sm4Key, 2, 7, randomNum,
                    certificationData, 8, 3);
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmInitDec.get(0)));
            ArrayList<byte[]> ccmUpdateDec = api.CCMUpdate(ccmInitDec.get(0), 2, ccmUpdate.get(0));
            System.out.println("解密后的数据： " + new String(ccmUpdateDec.get(0)));
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmUpdateDec.get(1)));
            ArrayList<byte[]> ccmUpdateDec1 = api.CCMUpdate(ccmUpdateDec.get(1), 2, ccmUpdate1.get(0));
            System.out.println("解密后的数据： " + new String(ccmUpdateDec1.get(0)));
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmUpdateDec1.get(1)));
            api.CCMFinal(ccmUpdateDec1.get(1), 2, tags);


            //========CCM分段加解密内部密钥=========
            System.out.println("========CCM分段加密=========");
            ArrayList<byte[]> ccmInitIndex = api.CCMInit(1, 25, 2, 7, randomNum,
                    certificationData, 8, 96);
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmInitIndex.get(0)));
            ArrayList<byte[]> ccmUpdateIndex1 = api.CCMUpdate(ccmInitIndex.get(0), 1, "1234567890123456789012345678901234567890".getBytes());
            System.out.println("加密后的数据： " + Forms.byteToHexString(ccmUpdateIndex1.get(0)));
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmUpdateIndex1.get(1)));
            ArrayList<byte[]> ccmUpdateIndex2 = api.CCMUpdate(ccmUpdateIndex1.get(1), 1, "12345678901234567890123456789012345678901234567812345678".getBytes());
            System.out.println("加密后的数据： " + Forms.byteToHexString(ccmUpdateIndex2.get(0)));
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmUpdateIndex2.get(1)));
            byte[] tags1 = api.CCMFinal(ccmUpdateIndex2.get(1), 1, null);
            System.out.println("Tags： " + Forms.byteToHexString(tags1));

            System.out.println("=======CCM分段解密==========");
            ArrayList<byte[]> ccmInitIndexDec = api.CCMInit(2, 25, 2, 7, randomNum,
                    certificationData, 8, 96);
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmInitIndexDec.get(0)));
            ArrayList<byte[]> ccmUpdateIndexDec = api.CCMUpdate(ccmInitIndexDec.get(0), 2, ccmUpdateIndex1.get(0));
            System.out.println("解密后的数据： " + new String(ccmUpdateIndexDec.get(0)));
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmUpdateIndexDec.get(1)));
            ArrayList<byte[]> ccmUpdateIndexDec1 = api.CCMUpdate(ccmUpdateIndexDec.get(1), 2, ccmUpdateIndex2.get(0));
            System.out.println("解密后的数据： " + new String(ccmUpdateIndexDec1.get(0)));
            System.out.println("上下文句柄： " + Forms.byteToHexString(ccmUpdateIndexDec1.get(1)));
            api.CCMFinal(ccmUpdateIndexDec1.get(1), 2, tags1);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * CCM 加密解密
     */
    
    public void testCCMEncAndDec() {
        try {
            byte[] sm4Key = Forms.hexStringToByte("6C0BE750CCBC7A0C3F29FC90862E28BF");
            byte[] sm4KeyCV = Forms.hexStringToByte("704A549C69DA008C");
            byte[] inData = "1234567812345678".getBytes();
            byte[] certificationData = "12236523".getBytes();
            byte[] randomNum = Forms.hexStringToByte(api.genRandom(7));
            System.out.println("随机数： " + Forms.byteToHexString(randomNum));
            System.out.println("=============外部密钥========");

            ArrayList<byte[]> encData = api.CCMEnc(sm4Key, 1, 7, inData, randomNum, certificationData, 8);
            System.out.println("加密后的数据： " + Forms.byteToHexString(encData.get(0)));
            System.out.println("tags： " + Forms.byteToHexString(encData.get(1)));

            byte[] bytes = api.CCMDec(sm4Key, 1, 7, encData.get(0),
                    randomNum, certificationData, encData.get(1));
            System.out.println("解密后的数据： " + new String(bytes));

            System.out.println("=============内部密钥========");
            ArrayList<byte[]> encDataIndex = api.CCMEnc(25, 2, 7, inData, randomNum,
                    certificationData, 8);
            System.out.println("加密后的数据： " + Forms.byteToHexString(encDataIndex.get(0)));
            System.out.println("tags： " + Forms.byteToHexString(encDataIndex.get(1)));

            byte[] bytesIndex = api.CCMDec(25, 2, 7, encDataIndex.get(0),
                    randomNum, certificationData, encDataIndex.get(1));
            System.out.println("解密后的数据： " + new String(bytesIndex));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    
    public void blockDecryptStrTest() {
        try {
            List<String> datas = new ArrayList<String>();
            String data;
            for (int i = 0; i < 10000; i++) {
                data = Integer.toString(i);
                datas.add(data);
            }
            //SM4密钥
            byte[] sm4Key = Forms.hexStringToByte("EE828FCCFAC494756468B1FECCE81192");
            //加密
            List<String> result = api.blockEncryptStr(datas, sm4Key, TACryptConst.ENC_MODE_ECB, TACryptConst.KEY_TYPE_CIPHER, TACryptConst.KEY_ALG_SM4, null);
            //解密
            List<String> result1 = api.blockDecryptStr(result, sm4Key, TACryptConst.ENC_MODE_ECB, TACryptConst.KEY_TYPE_CIPHER, TACryptConst.KEY_ALG_SM4, null);
            //判断解密后的数据跟加密前的数据是否能对得上
            boolean flag = true;
            for (int i = 0; i < result1.size(); i++) {
                if (!(datas.get(i).equals(result1.get(i)))) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                System.out.println("加解密验证成功~");
            } else {
                System.err.println("加解密验证失败！！！！！！！！！！！！！！！！");
            }
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * SM2、ECC 密钥协商
     */
    
    public void SM2OrECCECDH() {
        try {
            System.out.println("===========SM2明文密钥==============");
            ArrayList<byte[]> ECDH = api.SM2OrECCECDH(0007, 3, 7, 0, Forms.hexStringToByte("532BC62BF36BC4A0B054C89CA78C0EF7DC5D8D3E5FDC248423E8FBD81C261AF7"),
                    Forms.hexStringToByte("DD8A0E5DD866F01C201DDBF917772045BF0198AEDFF28F901880FC698ADFB42D"),
                    Forms.hexStringToByte("0FBB24145B7CE2B664C16823D74CE04383DFABF58D9B704A8888EF6EF63EADC8")
            );
            for (int i = 0; i < ECDH.size(); i++) {
                System.out.println(Forms.byteToHexString(ECDH.get(i)));
            }
            System.out.println("===========brainpoolP192r1 密文密钥==============");
            ArrayList<byte[]> ECDH1 = api.SM2OrECCECDH(923, 3, 7, 0, Forms.hexStringToByte("B9E24F56FB268643493C905C6FB067CDD738ADC9EF6B9F56D592F93BA4A3602A"),
                    Forms.hexStringToByte("276CAAFD4FC6A30DC75FA441AD3011FF64AB9A784EF0DC1D"),
                    Forms.hexStringToByte("A1DE2E0E5D611B7033ADA9C46BB1C6F2F2F645D1EB846BE6")
            );
            for (int i = 0; i < ECDH.size(); i++) {
                System.out.println(Forms.byteToHexString(ECDH1.get(i)));
            }
            System.out.println("===========secp384r1 / NIST P-384  内部索引==============");
            ArrayList<byte[]> ECDH2 = api.SM2OrECCECDH(0x02cb, 3, 7, 5, null,
                    Forms.hexStringToByte("26535CCF0EA42C4CBA74251749650B447C91359C833D38701FDC56744184EB077DAA8C82BB475F5FE7471B78540035AE"),
                    Forms.hexStringToByte("9DB34F4329998726AEDC34B42CCDE40085CA5FC7197F809BFB53C9AB9B08421B816F04F06EC73927CB06229055677A4D")
            );
            for (int i = 0; i < ECDH.size(); i++) {
                System.out.println(Forms.byteToHexString(ECDH.get(i)));
            }
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * 删除密钥
     */
//    
    public void deletekey() {
        try {
            System.out.println("删除对称秘钥：" + api.deleteKey(0, 101));
            System.out.println("删除RSA密钥:" + api.deleteKey(1, 101));
            System.out.println("删除ECC密钥:" + api.deleteKey(2, 101));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * 获取索引密钥信息
     */
    
    public void listKeys() {
        try {
            ArrayList<Integer> integers = api.listKeys(0, 110);
            for (int i = 0; i < integers.size(); i++) {
                System.out.print(integers.get(i) + "  ");
            }
            System.out.println();
            ArrayList<Integer> integers1 = api.listKeys(1, 1);
            for (int i = 0; i < integers1.size(); i++) {
                System.out.print(integers1.get(i) + "  ");
            }
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    /**
     * GCM 算法加解密
     */
    
    public void GCMEncAndDec() {
        String inData
        try {
            System.out.println("==============SM4外部明文密钥 大报文");
            ArrayList<byte[]> gcmEncBig = api.GCMEnc(0, 1, "1111111111111111".getBytes(), 7, new byte[16],
                    "12345678".getBytes(), inData.getBytes());
            System.out.println("加密结果:" + Forms.byteToHexString(gcmEncBig.get(0)));
            System.out.println("Tags:" + Forms.byteToHexString(gcmEncBig.get(1)));

            byte[] gcmDecBig = api.GCMDec(0, 1, "1111111111111111".getBytes(), 7, new byte[16],
                    "12345678".getBytes(), gcmEncBig.get(0), gcmEncBig.get(1));
            System.out.println("解密后的明文：" + new String(gcmDecBig));
            System.out.println("解密后的明文与原文比较结果：" + inData.equals(new String(gcmDecBig)));

            System.out.println("==============SM4外部明文密钥");
            ArrayList<byte[]> gcmEnc = api.GCMEnc(0, 1, "1111111111111111".getBytes(), 7, new byte[16],
                    "12345678".getBytes(), "12345678123456".getBytes());
            System.out.println("加密结果:" + Forms.byteToHexString(gcmEnc.get(0)));
            System.out.println("Tags:" + Forms.byteToHexString(gcmEnc.get(1)));

            byte[] gcmDec = api.GCMDec(0, 1, "1111111111111111".getBytes(), 7, new byte[16],
                    "12345678".getBytes(), gcmEnc.get(0), gcmEnc.get(1));
            System.out.println("解密后的明文：" + new String(gcmDec));

            System.out.println("==============AES128外部密文密钥");
            ArrayList<byte[]> gcmAESEnc = api.GCMEnc(0, 1, Forms.hexStringToByte("97A3223F15B511A2818E3420C0A247A4"),
                    3, new byte[16],
                    "12345678".getBytes(), "12345678123456".getBytes());
            System.out.println("加密结果:" + Forms.byteToHexString(gcmAESEnc.get(0)));
            System.out.println("Tags:" + Forms.byteToHexString(gcmAESEnc.get(1)));

            byte[] gcmAESDec = api.GCMDec(0, 1, Forms.hexStringToByte("97A3223F15B511A2818E3420C0A247A4"),
                    3, new byte[16],
                    "12345678".getBytes(), gcmAESEnc.get(0), gcmAESEnc.get(1));
            System.out.println("解密后的明文：" + new String(gcmAESDec));

            System.out.println("==============AES256内部密文密钥");
            ArrayList<byte[]> gcmAES256Enc = api.GCMEnc(50, 1, null,
                    5, new byte[16],
                    "12345678".getBytes(), "12345678123456".getBytes());
            System.out.println("加密结果:" + Forms.byteToHexString(gcmAES256Enc.get(0)));
            System.out.println("Tags:" + Forms.byteToHexString(gcmAES256Enc.get(1)));

            byte[] gcmAES256Dec = api.GCMDec(50, 1, null,
                    5, new byte[16],
                    "12345678".getBytes(), gcmAES256Enc.get(0), gcmAES256Enc.get(1));
            System.out.println("解密后的明文：" + new String(gcmAES256Dec));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    
    public void exportKey() {
        try {
            ArrayList<String> bytes = api.exportLMKKey(0, 1, 0);
            System.out.println("对称密钥的密文：" + bytes.get(0));
            System.out.println("对称密钥的校验值：" + bytes.get(1));
            System.out.println("对称密钥类型:" + bytes.get(2));
            System.out.println("----------------------------------");
            ArrayList<String> bytes1 = api.exportLMKKey(1, 1, 0);
            System.out.println("RSA公钥分量N：" + bytes1.get(0));
            System.out.println("RSA公钥分量E：" + bytes1.get(1));
            System.out.println("RSA私钥密文：" + bytes1.get(2));
            System.out.println("-----------------------------------");
            ArrayList<String> bytes2 = api.exportLMKKey(2, 1, 0);
            System.out.println("ECC/SM2公钥分量X：" + bytes2.get(0));
            System.out.println("ECC/SM2公钥分量Y：" + bytes2.get(1));
            System.out.println("ECC/SM2私钥密文：" + bytes2.get(2));
            System.out.println("ECC/SM2曲线标识：" + bytes2.get(3));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    
    public void SM2SignAndv() {
        try {
            byte[] publicKey = Forms.hexStringToByte("3059301306072A8648CE3D020106082A811CCF5501822D034200040DFCA4A77E2D358A559B12038749695FF9DBF9FE5CCFEE1B04A5EAABB7BB4A67128F41D008B31BEBDA1EA1F0021EDD7A8FEEC22D174FECB88C5D4D6E83B57FBB");
            byte[] privateKey = Forms.hexStringToByte("283573E508ADD4049F4C95A169FB731C382E38A0492C66CF5AC8B58BAEB1DE1FA2FF560DD2201232");
            System.out.println("=======外部密钥====");
            byte[] bytes = api.SM2PrivateKeySign(null, "123".getBytes(),
                    publicKey,
                    privateKey,
                    0);
            System.out.println(Forms.byteToHexString(bytes));

            boolean b = api.SM2PublicKeyVerify(0, null, "123".getBytes(), bytes, publicKey);
            System.out.println(b);

            System.out.println("=======内部密钥====");
            byte[] bytes1 = api.SM2PrivateKeySign(null, "123".getBytes(),
                    null,
                    1,
                    0);
            System.out.println(Forms.byteToHexString(bytes1));

            boolean b1 = api.SM2PublicKeyVerify(0, null, "123".getBytes(), bytes1, 1);
            System.out.println(b1);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    
    public void multiHash() {
        try {
            //algHashs
            List<Object> algHashs = new ArrayList<Object>();
//        algHashs.add(1);
//        algHashs.add(2);
//        algHashs.add(5);
//        algHashs.add(6);
//        algHashs.add(7);
//        algHashs.add(8);
            algHashs.add(20);
//        algHashs.add(35);
//        algHashs.add(36);
//        algHashs.add(37);
//        algHashs.add(38);
            //x y
            byte[] x = Forms.hexStringToByte("65DC8AD2655B72FE6120B2F7707B869F8ADEFB2105D20D33441AEBD886726938");
            byte[] y = Forms.hexStringToByte("E39A8C730E084497F185842C7B77EB2F0C41535203C355AB3915501D2D5CF7D2");
            //userIds
            List<Object> userIds = new ArrayList<Object>();
            userIds.add(Forms.hexStringToByte("123456"));
//            userIds.add(Forms.hexStringToByte("12345678"));
            //D
            List<byte[]> D = new ArrayList<byte[]>();
            for (int i = 0; i < 120; i++) {
                D.add(Forms.hexStringToByte("12345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456"));
            }
            //参与计算笛卡儿积的因数集合
            List<List<Object>> params = new ArrayList<List<Object>>();
            params.add(algHashs);
            params.add(userIds);
            //笛卡儿积计算结果
            List<List<Object>> result = new ArrayList<List<Object>>();
            //计算笛卡儿积
            Utils.descartes(params, result, 0, new ArrayList<Object>());

            for (List<Object> param : result) {
                List<byte[]> list = api.multiHash((Integer) param.get(0), x, y, (byte[]) param.get(1), D);
                for (byte[] DHash : list) {
                    System.out.println("当前参数：algHash:" + (Integer) param.get(0) + ", userId:" + Forms.byteToHexString((byte[]) param.get(1)));
                    System.out.println(Forms.byteToHexString(DHash));
                }
            }
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }
    
    public void testSymmEncAndDec() {
        try {
            System.out.println("------SM4-CTR----------外部密钥----------------");
            byte[] bytes = api.generalDataEnc(Forms.hexStringToByte("6F1085918AA07B3505A8BE3694EC6FC4"), 8, 2,
                    7, 0, 0, 0,
                    "1234567812345678".getBytes(), new byte[16]);

            byte[] bytes1 = api.generalDataDec(Forms.hexStringToByte("6F1085918AA07B3505A8BE3694EC6FC4"), 8, 2,
                    7, 0, 0, 0,
                    bytes, new byte[16]);
            System.out.println(new String(bytes1));
            System.out.println("------SM4-CTR----------内部密钥----------------");
            bytes = api.generalDataEnc(25, 8, 2,
                    7, 0, 0, 0,
                    "1234567812345678".getBytes(), new byte[16]);

            bytes1 = api.generalDataDec(25, 8, 2,
                    7, 0, 0, 0,
                    bytes, new byte[16]);
            System.out.println(new String(bytes1));

            System.out.println("------STREAM-ECB----------外部密钥----------------");
            bytes = api.generalDataEnc(Forms.hexStringToByte("1FA6988C493AAFFF8BA6A7FCDFC5E04B"), 4, 2,
                    9, 0, 0, 0,
                    "1234567812345678".getBytes(), new byte[16]);

            bytes1 = api.generalDataDec(Forms.hexStringToByte("1FA6988C493AAFFF8BA6A7FCDFC5E04B"), 4, 2,
                    9, 0, 0, 0,
                    bytes, new byte[16]);
            System.out.println(new String(bytes1));
            System.out.println("------STREAM-ECB----------内部密钥----------------");
            bytes = api.generalDataEnc(607, 4, 2,
                    9, 0, 0, 0,
                    "1234567812345678".getBytes(), new byte[16]);

            bytes1 = api.generalDataDec(607, 4, 2,
                    9, 0, 0, 0,
                    bytes, new byte[16]);
            System.out.println(new String(bytes1));
            System.out.println("------EEA3-ECB----------内部密钥----------------");
            bytes = api.generalDataEnc(606, 5, 2,
                    10, 100, 2, 3,
                    "1234567812345678".getBytes(), new byte[16]);

            bytes1 = api.generalDataDec(606, 5, 2,
                    10, 100, 2, 3,
                    bytes, new byte[16]);
            System.out.println(new String(bytes1));
            System.out.println("------EEA3-ECB----------外部密钥----------------");
            bytes = api.generalDataEnc(Forms.hexStringToByte("B096BBF6D98B7EBF3792E3DE99E33AAB"), 5, 2,
                    10, 100, 2, 3,
                    "1234567812345678".getBytes(), new byte[16]);

            bytes1 = api.generalDataDec(Forms.hexStringToByte("B096BBF6D98B7EBF3792E3DE99E33AAB"), 5, 2,
                    10, 100, 2, 3,
                    bytes, new byte[16]);
            System.out.println(new String(bytes1));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    
    public void test() {
        try {
            ArrayList<byte[]> bytes = api.proImportSymmetricKey(0, 0, 7,
                    Forms.hexStringToByte("EE828FCCFAC494756468B1FECCE81192"),
                    "", 7, 0, "11", new byte[16],
                    Forms.hexStringToByte("39AD25081668C717BEE980F0E774D545"));
            System.out.println(Forms.byteToHexString(bytes.get(0)));
            System.out.println(Forms.byteToHexString(bytes.get(1)));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻断处理");
        }
    }

    
    public void testEncBlock() {
        try {
            List<byte[]> encData = Arrays.asList(
                    "12345678".getBytes(),
                    "12345678#$%^&".getBytes(),
                    "skdjskdnsdk".getBytes(),
                    "skdjskdnsdk1213434".getBytes(),
                    "张俊龙121".getBytes(),
                    "张俊龙dnsdnlsf1".getBytes()
            );
            List<byte[]> encData1 = new ArrayList<byte[]>();
            for (int i = 0; i < 100; i++) {
                byte[] a = new byte[i];
                encData1.add(a);
            }
            List<byte[]> bytes = api.blockEncryptEx(encData, sm4Key, 0, 2, 7, null);

            List<byte[]> bytes1 = api.blockDecryptEx(bytes, sm4Key, 0, 2, 7, null);
            for (int i = 0; i < bytes1.size(); i++) {
                System.out.println(new String(bytes1.get(i)));
            }
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻塞处理");
        }
    }

//    
    public void importASymmKey() {
        System.out.println("导入lmk加密的非对称密钥");
        byte[] cipherByLMK = Forms.hexStringToByte
//        byte[] cipherByLMK = Forms.hexStringToByte("F3D13F330AF0FC6611E9C2CEBE937C2247415E68B821DF285F084F2D3A94BBD53CA1E6404636CBD4");
        try {
            api.importASymmKey(1, 07, cipherByLMK, 27, 1, "gzy导入rsa".getBytes(), new byte[0]);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻塞性处理");
        }
    }

    /**
     * 密钥同步多机
     */
//    
    public void testSyncAll() {
        try {
            //产生并保存对称密钥
            ArrayList<byte[]> symmKey = api.generateSymmKeySyncAll(7, 101);
            for (int i = 0; i < symmKey.size(); i++) {
                System.out.println(Forms.byteToHexString(symmKey.get(i)));
            }
            //导入对称密钥
            byte[] cipherByLMK = Forms.hexStringToByte("E009675342A94388ABBE7F2E5AA73BF9");
            byte[] keycv = Forms.hexStringToByte("D370B94818BAD5C3");
            api.importSymmKeySyncAll(101,"SM4",cipherByLMK,keycv);
            //传输密钥保护导入一条密钥
            ArrayList<byte[]> bytes = api.proImportSymmetricKeySyncAll(0, 0, 7,
                    Forms.hexStringToByte("EE828FCCFAC494756468B1FECCE81192"),
                    "", 7, 101, "11", new byte[16],
                    Forms.hexStringToByte("39AD25081668C717BEE980F0E774D545"));
            System.out.println(Forms.byteToHexString(bytes.get(0)));
            System.out.println(Forms.byteToHexString(bytes.get(1)));
            //生成RSA签名密钥对并保存-已过时
            boolean b0 = api.generateRSAKeySyncAll(2048, 65537, 100);
            System.out.println("产生并保存RSA签名密钥对" + (b0 ? "成功" : "失败"));
            //生成RSA密钥对并保存
            boolean b = api.generateRSAKeySyncAll(2048, 65537, 100,2);
            System.out.println("产生并保存RSA密钥对" + (b ? "成功" : "失败"));
            //生成ECC密钥对并保存
            boolean b1 = api.generateECCKeySyncAll(0x019F, 200);
            System.out.println("产生并保存ECC密钥对" + (b1 ? "成功" : "失败"));
            //导入 LMK 加密的（RSA/ECC）密钥到某索引
            byte[] privateRSALMK = Forms.hexStringToByte
            api.importASymmKeySyncAll(1, 07, privateRSALMK, 101, 1, "gzy导入rsa".getBytes(), new byte[0]);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻塞性处理");
        }
    }

    
    public void file() {
        try {
            final byte[] fileName = "test-Ghsm-20230421".getBytes();
            //创建文件
            boolean b = api.createFile(fileName, 8192);
            System.out.println("创建文件：" + (b ? "成功" : "失败"));
            //写入文件
            boolean b1 = api.writeFile(fileName, 0, "测试数据开始：".getBytes());
            System.out.println("写入文件：" + (b1 ? "成功" : "失败"));
            boolean b2 = api.writeFile(fileName, "测试数据开始：".getBytes().length, "1234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678".getBytes());
            System.out.println("写入文件：" + (b2 ? "成功" : "失败"));
            //读取文件
            byte[] bytes = api.readFile(fileName, 0, 4096);
            System.out.println("读取文件内容：" + new String(bytes));
            byte[] bytes1 = api.readFile(fileName, "测试数据开始：".getBytes().length, 9);
            System.out.println("读取文件内容：" + new String(bytes1));
            //删除文件
            boolean b3 = api.deleteFile(fileName);
            System.out.println("删除文件：" + (b3 ? "成功" : "失败"));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻塞性处理");
        }
    }

    
    public void dispersalKey(){
        //密钥分散
        ArrayList<byte[]> bytes = null;
        try {
            bytes = api.dispersalKey(Forms.hexStringToByte("78D51FF85CD1B54D056CF9A2BC770898"), 07, 1, 1, "12345678123456781234567812345678");
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻塞性处理");
        }
        System.out.println("分散密钥："+Forms.byteToHexString(bytes.get(0)));
        System.out.println("分散密钥校验值："+Forms.byteToHexString(bytes.get(1)));
    }

    
    public void FPEEncAndDec(){
        //fpe加解密
        byte[] enc = new byte[0];
        byte[] dec = new byte[0];
        try {
            enc = api.FPEEncAndDec(1, 11, Forms.hexStringToByte("78D51FF85CD1B54D056CF9A2BC770898"), 2, 07, new byte[7], 0, 10, "12345678".getBytes());
            dec = api.FPEEncAndDec(0, 11, Forms.hexStringToByte("78D51FF85CD1B54D056CF9A2BC770898"), 2, 07, new byte[7], 0, 10, enc);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("阻断处理");
        }
        System.out.println("fpe加密结果："+new String(enc));
        System.out.println("fpe解密结果"+new String(dec));
    }

    
    public void dukptDisperseKey(){
        try {
            //密钥密文-标准pukdt-不存储
            ArrayList<byte[]> bytes = api.dukptDisperseKey(1, 02,
                    Forms.hexStringToByte("46D60D549507D068AA3B8476B0C5D5F1"),
                    1, Forms.hexStringToByte("FFFF3132333435363738"),
                    0, 0, null);
            System.out.println(Forms.byteToHexString(bytes.get(0)));
            System.out.println(Forms.byteToHexString(bytes.get(1)));
            //密钥密文-标准pukdt-存储
            ArrayList<byte[]> bytes1 = api.dukptDisperseKey(1, 02,
                    Forms.hexStringToByte("46D60D549507D068AA3B8476B0C5D5F1"),
                    1, Forms.hexStringToByte("FFFF3132333435363738"),
                    0, 10, "dukpt-Test".getBytes());
            System.out.println(Forms.byteToHexString(bytes1.get(0)));
            System.out.println(Forms.byteToHexString(bytes1.get(1)));
            //密钥明文-pek分散-不存储
            ArrayList<byte[]> bytes2 = api.dukptDisperseKey(1, 01,
                    Forms.hexStringToByte("12345678123456781234567812345678"),
                    1, Forms.hexStringToByte("FFFF3132333435363738"),
                    1, 0, null);
            System.out.println(Forms.byteToHexString(bytes2.get(0)));
            System.out.println(Forms.byteToHexString(bytes2.get(1)));
            //密钥明文-dek-不存储
            ArrayList<byte[]> bytes3 = api.dukptDisperseKey(1, 01,
                    Forms.hexStringToByte("12345678123456781234567812345678"),
                    1, Forms.hexStringToByte("FFFF3132333435363738"),
                    2, 0, null);
            System.out.println(Forms.byteToHexString(bytes3.get(0)));
            System.out.println(Forms.byteToHexString(bytes3.get(1)));
            //密钥明文-mek-不存储
            ArrayList<byte[]> bytes4 = api.dukptDisperseKey(1, 01,
                    Forms.hexStringToByte("12345678123456781234567812345678"),
                    1, Forms.hexStringToByte("FFFF3132333435363738"),
                    3, 0, null);
            System.out.println(Forms.byteToHexString(bytes4.get(0)));
            System.out.println(Forms.byteToHexString(bytes4.get(1)));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("阻断处理");
        }
    }

    
    public void xmssSignAndVer() {
        try {
            byte[] data = "12345678".getBytes();
            byte[] sign = api.xmssSign(3, Forms.hexStringToByte("0000000000000024"), data);
            System.out.println("签名:" + Forms.byteToHexString(sign));

            boolean b = api.xmssVerify(3, 0, null, data, sign);
            System.out.println("验签："+b);
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("阻断处理");
        }
    }

    
    public void xmssGetKeyInfo() {
        try {
            ArrayList<byte[]> bytes = api.xmssGetKeyInfo(3);
            System.out.println("类型："+Forms.integer_Bits32(bytes.get(0)));
            System.out.println("算法："+Forms.integer_Bits32(bytes.get(1)));
            System.out.println("状态："+Forms.integer_Bits32(bytes.get(2)));
            System.out.println("公钥："+Forms.byteToHexString(bytes.get(3)));
            System.out.println("叶子索引："+Forms.byteToHexString(bytes.get(4)));
            System.out.println("密钥标签："+new String(bytes.get(5)));
        } catch (TAException e) {
            e.printStackTrace();
            System.out.println("需阻塞性处理");
        }
    }
	
	
    /**
     * 生成p10
     */
    public void gencsr(){
        //生成证书请求
        try {
            byte[] csr = api.genCSR(2,1,0,7,Forms.hexStringToByte("42B6BFAEC19CD06FC08AA3CB98E46A3225B634732A69636BBAEC8CB798E2D90BA8E97FADDEE008A74A26A6ABD0BC42AFA6509C3A1B482AD4FB6CE26D2C05E283"),
                    0,"CN=33010802002000080001,O=02,O=09,L=01,L=01,ST=11,C=CN".getBytes(), 20,1);
            System.out.println(new String(csr));
        } catch (TAException e) {
            throw new RuntimeException(e);
        }
    }
}